// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: download_install_state.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Uplay.DownloadInstallState {

  /// <summary>Holder for reflection information generated from download_install_state.proto</summary>
  public static partial class DownloadInstallStateReflection {

    #region Descriptor
    /// <summary>File descriptor for download_install_state.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DownloadInstallStateReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cih1cGNfZHVtcF8xMC9kb3dubG9hZF9pbnN0YWxsX3N0YXRlLnByb3RvEiJt",
            "Zy5wcm90b2NvbC5kb3dubG9hZF9pbnN0YWxsX3N0YXRlIi4KB0xpY2Vuc2US",
            "EgoKaWRlbnRpZmllchgBIAIoCRIPCgd2ZXJzaW9uGAIgAigNIlQKCUluc3Rh",
            "bGxlchISCgppZGVudGlmaWVyGAEgAigJEhgKEG1hbmlmZXN0X3ZlcnNpb24Y",
            "AiABKA0SGQoRaW5zdGFsbGVkX3ZlcnNpb24YAyABKA0iWgoNUmVnaXN0cnlF",
            "bnRyeRILCgNrZXkYASACKAkSEAoIbGFuZ3VhZ2UYAiABKAkSFAoMc3RyaW5n",
            "X3ZhbHVlGAMgASgJEhQKDG51bWJlcl92YWx1ZRgEIAEoDSKKAQoFQ2h1bmsS",
            "EAoIY2h1bmtfaWQYASACKA0SEwoLaXNfcmVxdWlyZWQYAiACKAgSFQoNaXNf",
            "ZG93bmxvYWRlZBgDIAIoCBIQCghsYW5ndWFnZRgEIAEoCRIQCgh1cGxheV9p",
            "ZBgFIAEoDRIMCgR0YWdzGAYgASgJEhEKCXVwbGF5X2lkcxgHIAMoDSIYCghT",
            "aG9ydGN1dBIMCgRuYW1lGAEgAigJIjEKDVRleHRGaWxlRW50cnkSEAoIZmls",
            "ZU5hbWUYASACKAkSDgoGbG9jYWxlGAIgAigJImIKDFRleHRGaWxlTGlzdBIQ",
            "Cghyb290UGF0aBgBIAEoCRJACgVmaWxlcxgCIAMoCzIxLm1nLnByb3RvY29s",
            "LmRvd25sb2FkX2luc3RhbGxfc3RhdGUuVGV4dEZpbGVFbnRyeSLIBwoURG93",
            "bmxvYWRJbnN0YWxsU3RhdGUSFQoNbWFuaWZlc3Rfc2hhMRgBIAEoCRIYChBk",
            "b3dubG9hZGluZ19zaGExGAogASgJEg8KB3ZlcnNpb24YAiABKA0SGQoRc2Vs",
            "ZWN0ZWRfbGFuZ3VhZ2UYAyABKAkSPQoIbGljZW5zZXMYBCADKAsyKy5tZy5w",
            "cm90b2NvbC5kb3dubG9hZF9pbnN0YWxsX3N0YXRlLkxpY2Vuc2USQQoKaW5z",
            "dGFsbGVycxgFIAMoCzItLm1nLnByb3RvY29sLmRvd25sb2FkX2luc3RhbGxf",
            "c3RhdGUuSW5zdGFsbGVyEjkKBmNodW5rcxgGIAMoCzIpLm1nLnByb3RvY29s",
            "LmRvd25sb2FkX2luc3RhbGxfc3RhdGUuQ2h1bmsSFQoNc2hvcnRjdXRfbmFt",
            "ZRgLIAEoCRI/CglzaG9ydGN1dHMYDSADKAsyLC5tZy5wcm90b2NvbC5kb3du",
            "bG9hZF9pbnN0YWxsX3N0YXRlLlNob3J0Y3V0EksKEHJlZ2lzdHJ5X2VudHJp",
            "ZXMYDyADKAsyMS5tZy5wcm90b2NvbC5kb3dubG9hZF9pbnN0YWxsX3N0YXRl",
            "LlJlZ2lzdHJ5RW50cnkSEQoJbGFuZ3VhZ2VzGBEgAygJEh0KFWRvd25sb2Fk",
            "aW5nX2xhbmd1YWdlcxgSIAMoCRIWCg5wYXRjaF9yZXF1aXJlZBgTIAEoCBIn",
            "Ch9ieXRlc19kb3dubG9hZGVkX29uX3BhdGNoX3N0YXJ0GBQgASgEEjAKKHJl",
            "cXVpcmVkX2J5dGVzX2Rvd25sb2FkZWRfb25fcGF0Y2hfc3RhcnQYFSABKAQS",
            "EQoJZ2FtZV9uYW1lGBYgASgJEkUKC3JlYWRtZUZpbGVzGBcgASgLMjAubWcu",
            "cHJvdG9jb2wuZG93bmxvYWRfaW5zdGFsbF9zdGF0ZS5UZXh0RmlsZUxpc3QS",
            "RQoLbWFudWFsRmlsZXMYGCABKAsyMC5tZy5wcm90b2NvbC5kb3dubG9hZF9p",
            "bnN0YWxsX3N0YXRlLlRleHRGaWxlTGlzdBIUCgxnYW1lX3ZlcnNpb24YGSAB",
            "KAkSGwoTaW5zdGFsbGVkX2xhbmd1YWdlcxgaIAMoCRIYChBpbnN0YWxsZWRf",
            "YWRkb25zGBsgAygNEhAKCHVwbGF5X2lkGBwgASgNEiYKHmludmFsaWRhdGVf",
            "Z2FtZV90b2tlbl9yZXF1aXJlZBgdIAEoCBIkChVlcGljX3J1bl9pbnN0YWxs",
            "YXRpb24YHiABKAg6BWZhbHNl"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Uplay.DownloadInstallState.License), global::Uplay.DownloadInstallState.License.Parser, new[]{ "Identifier", "Version" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Uplay.DownloadInstallState.Installer), global::Uplay.DownloadInstallState.Installer.Parser, new[]{ "Identifier", "ManifestVersion", "InstalledVersion" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Uplay.DownloadInstallState.RegistryEntry), global::Uplay.DownloadInstallState.RegistryEntry.Parser, new[]{ "Key", "Language", "StringValue", "NumberValue" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Uplay.DownloadInstallState.Chunk), global::Uplay.DownloadInstallState.Chunk.Parser, new[]{ "ChunkId", "IsRequired", "IsDownloaded", "Language", "UplayId", "Tags", "UplayIds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Uplay.DownloadInstallState.Shortcut), global::Uplay.DownloadInstallState.Shortcut.Parser, new[]{ "Name" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Uplay.DownloadInstallState.TextFileEntry), global::Uplay.DownloadInstallState.TextFileEntry.Parser, new[]{ "FileName", "Locale" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Uplay.DownloadInstallState.TextFileList), global::Uplay.DownloadInstallState.TextFileList.Parser, new[]{ "RootPath", "Files" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Uplay.DownloadInstallState.DownloadInstallState), global::Uplay.DownloadInstallState.DownloadInstallState.Parser, new[]{ "ManifestSha1", "DownloadingSha1", "Version", "SelectedLanguage", "Licenses", "Installers", "Chunks", "ShortcutName", "Shortcuts", "RegistryEntries", "Languages", "DownloadingLanguages", "PatchRequired", "BytesDownloadedOnPatchStart", "RequiredBytesDownloadedOnPatchStart", "GameName", "ReadmeFiles", "ManualFiles", "GameVersion", "InstalledLanguages", "InstalledAddons", "UplayId", "InvalidateGameTokenRequired", "EpicRunInstallation" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class License : pb::IMessage<License>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<License> _parser = new pb::MessageParser<License>(() => new License());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<License> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Uplay.DownloadInstallState.DownloadInstallStateReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public License() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public License(License other) : this() {
      _hasBits0 = other._hasBits0;
      identifier_ = other.identifier_;
      version_ = other.version_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public License Clone() {
      return new License(this);
    }

    /// <summary>Field number for the "identifier" field.</summary>
    public const int IdentifierFieldNumber = 1;
    private readonly static string IdentifierDefaultValue = "";

    private string identifier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Identifier {
      get { return identifier_ ?? IdentifierDefaultValue; }
      set {
        identifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "identifier" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIdentifier {
      get { return identifier_ != null; }
    }
    /// <summary>Clears the value of the "identifier" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIdentifier() {
      identifier_ = null;
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 2;
    private readonly static uint VersionDefaultValue = 0;

    private uint version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Version {
      get { if ((_hasBits0 & 1) != 0) { return version_; } else { return VersionDefaultValue; } }
      set {
        _hasBits0 |= 1;
        version_ = value;
      }
    }
    /// <summary>Gets whether the "version" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVersion {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "version" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVersion() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as License);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(License other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Identifier != other.Identifier) return false;
      if (Version != other.Version) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasIdentifier) hash ^= Identifier.GetHashCode();
      if (HasVersion) hash ^= Version.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasIdentifier) {
        output.WriteRawTag(10);
        output.WriteString(Identifier);
      }
      if (HasVersion) {
        output.WriteRawTag(16);
        output.WriteUInt32(Version);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasIdentifier) {
        output.WriteRawTag(10);
        output.WriteString(Identifier);
      }
      if (HasVersion) {
        output.WriteRawTag(16);
        output.WriteUInt32(Version);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasIdentifier) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Identifier);
      }
      if (HasVersion) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(License other) {
      if (other == null) {
        return;
      }
      if (other.HasIdentifier) {
        Identifier = other.Identifier;
      }
      if (other.HasVersion) {
        Version = other.Version;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Identifier = input.ReadString();
            break;
          }
          case 16: {
            Version = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Identifier = input.ReadString();
            break;
          }
          case 16: {
            Version = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Installer : pb::IMessage<Installer>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Installer> _parser = new pb::MessageParser<Installer>(() => new Installer());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Installer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Uplay.DownloadInstallState.DownloadInstallStateReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Installer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Installer(Installer other) : this() {
      _hasBits0 = other._hasBits0;
      identifier_ = other.identifier_;
      manifestVersion_ = other.manifestVersion_;
      installedVersion_ = other.installedVersion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Installer Clone() {
      return new Installer(this);
    }

    /// <summary>Field number for the "identifier" field.</summary>
    public const int IdentifierFieldNumber = 1;
    private readonly static string IdentifierDefaultValue = "";

    private string identifier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Identifier {
      get { return identifier_ ?? IdentifierDefaultValue; }
      set {
        identifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "identifier" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIdentifier {
      get { return identifier_ != null; }
    }
    /// <summary>Clears the value of the "identifier" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIdentifier() {
      identifier_ = null;
    }

    /// <summary>Field number for the "manifest_version" field.</summary>
    public const int ManifestVersionFieldNumber = 2;
    private readonly static uint ManifestVersionDefaultValue = 0;

    private uint manifestVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ManifestVersion {
      get { if ((_hasBits0 & 1) != 0) { return manifestVersion_; } else { return ManifestVersionDefaultValue; } }
      set {
        _hasBits0 |= 1;
        manifestVersion_ = value;
      }
    }
    /// <summary>Gets whether the "manifest_version" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasManifestVersion {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "manifest_version" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearManifestVersion() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "installed_version" field.</summary>
    public const int InstalledVersionFieldNumber = 3;
    private readonly static uint InstalledVersionDefaultValue = 0;

    private uint installedVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint InstalledVersion {
      get { if ((_hasBits0 & 2) != 0) { return installedVersion_; } else { return InstalledVersionDefaultValue; } }
      set {
        _hasBits0 |= 2;
        installedVersion_ = value;
      }
    }
    /// <summary>Gets whether the "installed_version" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasInstalledVersion {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "installed_version" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearInstalledVersion() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Installer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Installer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Identifier != other.Identifier) return false;
      if (ManifestVersion != other.ManifestVersion) return false;
      if (InstalledVersion != other.InstalledVersion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasIdentifier) hash ^= Identifier.GetHashCode();
      if (HasManifestVersion) hash ^= ManifestVersion.GetHashCode();
      if (HasInstalledVersion) hash ^= InstalledVersion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasIdentifier) {
        output.WriteRawTag(10);
        output.WriteString(Identifier);
      }
      if (HasManifestVersion) {
        output.WriteRawTag(16);
        output.WriteUInt32(ManifestVersion);
      }
      if (HasInstalledVersion) {
        output.WriteRawTag(24);
        output.WriteUInt32(InstalledVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasIdentifier) {
        output.WriteRawTag(10);
        output.WriteString(Identifier);
      }
      if (HasManifestVersion) {
        output.WriteRawTag(16);
        output.WriteUInt32(ManifestVersion);
      }
      if (HasInstalledVersion) {
        output.WriteRawTag(24);
        output.WriteUInt32(InstalledVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasIdentifier) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Identifier);
      }
      if (HasManifestVersion) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ManifestVersion);
      }
      if (HasInstalledVersion) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InstalledVersion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Installer other) {
      if (other == null) {
        return;
      }
      if (other.HasIdentifier) {
        Identifier = other.Identifier;
      }
      if (other.HasManifestVersion) {
        ManifestVersion = other.ManifestVersion;
      }
      if (other.HasInstalledVersion) {
        InstalledVersion = other.InstalledVersion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Identifier = input.ReadString();
            break;
          }
          case 16: {
            ManifestVersion = input.ReadUInt32();
            break;
          }
          case 24: {
            InstalledVersion = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Identifier = input.ReadString();
            break;
          }
          case 16: {
            ManifestVersion = input.ReadUInt32();
            break;
          }
          case 24: {
            InstalledVersion = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RegistryEntry : pb::IMessage<RegistryEntry>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RegistryEntry> _parser = new pb::MessageParser<RegistryEntry>(() => new RegistryEntry());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<RegistryEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Uplay.DownloadInstallState.DownloadInstallStateReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RegistryEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RegistryEntry(RegistryEntry other) : this() {
      _hasBits0 = other._hasBits0;
      key_ = other.key_;
      language_ = other.language_;
      stringValue_ = other.stringValue_;
      numberValue_ = other.numberValue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RegistryEntry Clone() {
      return new RegistryEntry(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private readonly static string KeyDefaultValue = "";

    private string key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Key {
      get { return key_ ?? KeyDefaultValue; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "key" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasKey {
      get { return key_ != null; }
    }
    /// <summary>Clears the value of the "key" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearKey() {
      key_ = null;
    }

    /// <summary>Field number for the "language" field.</summary>
    public const int LanguageFieldNumber = 2;
    private readonly static string LanguageDefaultValue = "";

    private string language_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Language {
      get { return language_ ?? LanguageDefaultValue; }
      set {
        language_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "language" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLanguage {
      get { return language_ != null; }
    }
    /// <summary>Clears the value of the "language" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLanguage() {
      language_ = null;
    }

    /// <summary>Field number for the "string_value" field.</summary>
    public const int StringValueFieldNumber = 3;
    private readonly static string StringValueDefaultValue = "";

    private string stringValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string StringValue {
      get { return stringValue_ ?? StringValueDefaultValue; }
      set {
        stringValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "string_value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStringValue {
      get { return stringValue_ != null; }
    }
    /// <summary>Clears the value of the "string_value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStringValue() {
      stringValue_ = null;
    }

    /// <summary>Field number for the "number_value" field.</summary>
    public const int NumberValueFieldNumber = 4;
    private readonly static uint NumberValueDefaultValue = 0;

    private uint numberValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint NumberValue {
      get { if ((_hasBits0 & 1) != 0) { return numberValue_; } else { return NumberValueDefaultValue; } }
      set {
        _hasBits0 |= 1;
        numberValue_ = value;
      }
    }
    /// <summary>Gets whether the "number_value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasNumberValue {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "number_value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearNumberValue() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as RegistryEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(RegistryEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Language != other.Language) return false;
      if (StringValue != other.StringValue) return false;
      if (NumberValue != other.NumberValue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasKey) hash ^= Key.GetHashCode();
      if (HasLanguage) hash ^= Language.GetHashCode();
      if (HasStringValue) hash ^= StringValue.GetHashCode();
      if (HasNumberValue) hash ^= NumberValue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasKey) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (HasLanguage) {
        output.WriteRawTag(18);
        output.WriteString(Language);
      }
      if (HasStringValue) {
        output.WriteRawTag(26);
        output.WriteString(StringValue);
      }
      if (HasNumberValue) {
        output.WriteRawTag(32);
        output.WriteUInt32(NumberValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasKey) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (HasLanguage) {
        output.WriteRawTag(18);
        output.WriteString(Language);
      }
      if (HasStringValue) {
        output.WriteRawTag(26);
        output.WriteString(StringValue);
      }
      if (HasNumberValue) {
        output.WriteRawTag(32);
        output.WriteUInt32(NumberValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasKey) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (HasLanguage) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Language);
      }
      if (HasStringValue) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StringValue);
      }
      if (HasNumberValue) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumberValue);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(RegistryEntry other) {
      if (other == null) {
        return;
      }
      if (other.HasKey) {
        Key = other.Key;
      }
      if (other.HasLanguage) {
        Language = other.Language;
      }
      if (other.HasStringValue) {
        StringValue = other.StringValue;
      }
      if (other.HasNumberValue) {
        NumberValue = other.NumberValue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Language = input.ReadString();
            break;
          }
          case 26: {
            StringValue = input.ReadString();
            break;
          }
          case 32: {
            NumberValue = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Language = input.ReadString();
            break;
          }
          case 26: {
            StringValue = input.ReadString();
            break;
          }
          case 32: {
            NumberValue = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Chunk : pb::IMessage<Chunk>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Chunk> _parser = new pb::MessageParser<Chunk>(() => new Chunk());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Chunk> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Uplay.DownloadInstallState.DownloadInstallStateReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Chunk() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Chunk(Chunk other) : this() {
      _hasBits0 = other._hasBits0;
      chunkId_ = other.chunkId_;
      isRequired_ = other.isRequired_;
      isDownloaded_ = other.isDownloaded_;
      language_ = other.language_;
      uplayId_ = other.uplayId_;
      tags_ = other.tags_;
      uplayIds_ = other.uplayIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Chunk Clone() {
      return new Chunk(this);
    }

    /// <summary>Field number for the "chunk_id" field.</summary>
    public const int ChunkIdFieldNumber = 1;
    private readonly static uint ChunkIdDefaultValue = 0;

    private uint chunkId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ChunkId {
      get { if ((_hasBits0 & 1) != 0) { return chunkId_; } else { return ChunkIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        chunkId_ = value;
      }
    }
    /// <summary>Gets whether the "chunk_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasChunkId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "chunk_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearChunkId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "is_required" field.</summary>
    public const int IsRequiredFieldNumber = 2;
    private readonly static bool IsRequiredDefaultValue = false;

    private bool isRequired_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsRequired {
      get { if ((_hasBits0 & 2) != 0) { return isRequired_; } else { return IsRequiredDefaultValue; } }
      set {
        _hasBits0 |= 2;
        isRequired_ = value;
      }
    }
    /// <summary>Gets whether the "is_required" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsRequired {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "is_required" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsRequired() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "is_downloaded" field.</summary>
    public const int IsDownloadedFieldNumber = 3;
    private readonly static bool IsDownloadedDefaultValue = false;

    private bool isDownloaded_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsDownloaded {
      get { if ((_hasBits0 & 4) != 0) { return isDownloaded_; } else { return IsDownloadedDefaultValue; } }
      set {
        _hasBits0 |= 4;
        isDownloaded_ = value;
      }
    }
    /// <summary>Gets whether the "is_downloaded" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsDownloaded {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "is_downloaded" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsDownloaded() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "language" field.</summary>
    public const int LanguageFieldNumber = 4;
    private readonly static string LanguageDefaultValue = "";

    private string language_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Language {
      get { return language_ ?? LanguageDefaultValue; }
      set {
        language_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "language" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLanguage {
      get { return language_ != null; }
    }
    /// <summary>Clears the value of the "language" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLanguage() {
      language_ = null;
    }

    /// <summary>Field number for the "uplay_id" field.</summary>
    public const int UplayIdFieldNumber = 5;
    private readonly static uint UplayIdDefaultValue = 0;

    private uint uplayId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint UplayId {
      get { if ((_hasBits0 & 8) != 0) { return uplayId_; } else { return UplayIdDefaultValue; } }
      set {
        _hasBits0 |= 8;
        uplayId_ = value;
      }
    }
    /// <summary>Gets whether the "uplay_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUplayId {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "uplay_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUplayId() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 6;
    private readonly static string TagsDefaultValue = "";

    private string tags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Tags {
      get { return tags_ ?? TagsDefaultValue; }
      set {
        tags_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "tags" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTags {
      get { return tags_ != null; }
    }
    /// <summary>Clears the value of the "tags" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTags() {
      tags_ = null;
    }

    /// <summary>Field number for the "uplay_ids" field.</summary>
    public const int UplayIdsFieldNumber = 7;
    private static readonly pb::FieldCodec<uint> _repeated_uplayIds_codec
        = pb::FieldCodec.ForUInt32(56);
    private readonly pbc::RepeatedField<uint> uplayIds_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<uint> UplayIds {
      get { return uplayIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Chunk);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Chunk other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChunkId != other.ChunkId) return false;
      if (IsRequired != other.IsRequired) return false;
      if (IsDownloaded != other.IsDownloaded) return false;
      if (Language != other.Language) return false;
      if (UplayId != other.UplayId) return false;
      if (Tags != other.Tags) return false;
      if(!uplayIds_.Equals(other.uplayIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasChunkId) hash ^= ChunkId.GetHashCode();
      if (HasIsRequired) hash ^= IsRequired.GetHashCode();
      if (HasIsDownloaded) hash ^= IsDownloaded.GetHashCode();
      if (HasLanguage) hash ^= Language.GetHashCode();
      if (HasUplayId) hash ^= UplayId.GetHashCode();
      if (HasTags) hash ^= Tags.GetHashCode();
      hash ^= uplayIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasChunkId) {
        output.WriteRawTag(8);
        output.WriteUInt32(ChunkId);
      }
      if (HasIsRequired) {
        output.WriteRawTag(16);
        output.WriteBool(IsRequired);
      }
      if (HasIsDownloaded) {
        output.WriteRawTag(24);
        output.WriteBool(IsDownloaded);
      }
      if (HasLanguage) {
        output.WriteRawTag(34);
        output.WriteString(Language);
      }
      if (HasUplayId) {
        output.WriteRawTag(40);
        output.WriteUInt32(UplayId);
      }
      if (HasTags) {
        output.WriteRawTag(50);
        output.WriteString(Tags);
      }
      uplayIds_.WriteTo(output, _repeated_uplayIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasChunkId) {
        output.WriteRawTag(8);
        output.WriteUInt32(ChunkId);
      }
      if (HasIsRequired) {
        output.WriteRawTag(16);
        output.WriteBool(IsRequired);
      }
      if (HasIsDownloaded) {
        output.WriteRawTag(24);
        output.WriteBool(IsDownloaded);
      }
      if (HasLanguage) {
        output.WriteRawTag(34);
        output.WriteString(Language);
      }
      if (HasUplayId) {
        output.WriteRawTag(40);
        output.WriteUInt32(UplayId);
      }
      if (HasTags) {
        output.WriteRawTag(50);
        output.WriteString(Tags);
      }
      uplayIds_.WriteTo(ref output, _repeated_uplayIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasChunkId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChunkId);
      }
      if (HasIsRequired) {
        size += 1 + 1;
      }
      if (HasIsDownloaded) {
        size += 1 + 1;
      }
      if (HasLanguage) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Language);
      }
      if (HasUplayId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UplayId);
      }
      if (HasTags) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tags);
      }
      size += uplayIds_.CalculateSize(_repeated_uplayIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Chunk other) {
      if (other == null) {
        return;
      }
      if (other.HasChunkId) {
        ChunkId = other.ChunkId;
      }
      if (other.HasIsRequired) {
        IsRequired = other.IsRequired;
      }
      if (other.HasIsDownloaded) {
        IsDownloaded = other.IsDownloaded;
      }
      if (other.HasLanguage) {
        Language = other.Language;
      }
      if (other.HasUplayId) {
        UplayId = other.UplayId;
      }
      if (other.HasTags) {
        Tags = other.Tags;
      }
      uplayIds_.Add(other.uplayIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChunkId = input.ReadUInt32();
            break;
          }
          case 16: {
            IsRequired = input.ReadBool();
            break;
          }
          case 24: {
            IsDownloaded = input.ReadBool();
            break;
          }
          case 34: {
            Language = input.ReadString();
            break;
          }
          case 40: {
            UplayId = input.ReadUInt32();
            break;
          }
          case 50: {
            Tags = input.ReadString();
            break;
          }
          case 58:
          case 56: {
            uplayIds_.AddEntriesFrom(input, _repeated_uplayIds_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChunkId = input.ReadUInt32();
            break;
          }
          case 16: {
            IsRequired = input.ReadBool();
            break;
          }
          case 24: {
            IsDownloaded = input.ReadBool();
            break;
          }
          case 34: {
            Language = input.ReadString();
            break;
          }
          case 40: {
            UplayId = input.ReadUInt32();
            break;
          }
          case 50: {
            Tags = input.ReadString();
            break;
          }
          case 58:
          case 56: {
            uplayIds_.AddEntriesFrom(ref input, _repeated_uplayIds_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Shortcut : pb::IMessage<Shortcut>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Shortcut> _parser = new pb::MessageParser<Shortcut>(() => new Shortcut());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Shortcut> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Uplay.DownloadInstallState.DownloadInstallStateReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Shortcut() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Shortcut(Shortcut other) : this() {
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Shortcut Clone() {
      return new Shortcut(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearName() {
      name_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Shortcut);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Shortcut other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasName) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasName) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasName) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Shortcut other) {
      if (other == null) {
        return;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TextFileEntry : pb::IMessage<TextFileEntry>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TextFileEntry> _parser = new pb::MessageParser<TextFileEntry>(() => new TextFileEntry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TextFileEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Uplay.DownloadInstallState.DownloadInstallStateReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TextFileEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TextFileEntry(TextFileEntry other) : this() {
      fileName_ = other.fileName_;
      locale_ = other.locale_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TextFileEntry Clone() {
      return new TextFileEntry(this);
    }

    /// <summary>Field number for the "fileName" field.</summary>
    public const int FileNameFieldNumber = 1;
    private readonly static string FileNameDefaultValue = "";

    private string fileName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FileName {
      get { return fileName_ ?? FileNameDefaultValue; }
      set {
        fileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "fileName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFileName {
      get { return fileName_ != null; }
    }
    /// <summary>Clears the value of the "fileName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFileName() {
      fileName_ = null;
    }

    /// <summary>Field number for the "locale" field.</summary>
    public const int LocaleFieldNumber = 2;
    private readonly static string LocaleDefaultValue = "";

    private string locale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Locale {
      get { return locale_ ?? LocaleDefaultValue; }
      set {
        locale_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "locale" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLocale {
      get { return locale_ != null; }
    }
    /// <summary>Clears the value of the "locale" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLocale() {
      locale_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TextFileEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TextFileEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FileName != other.FileName) return false;
      if (Locale != other.Locale) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasFileName) hash ^= FileName.GetHashCode();
      if (HasLocale) hash ^= Locale.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasFileName) {
        output.WriteRawTag(10);
        output.WriteString(FileName);
      }
      if (HasLocale) {
        output.WriteRawTag(18);
        output.WriteString(Locale);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasFileName) {
        output.WriteRawTag(10);
        output.WriteString(FileName);
      }
      if (HasLocale) {
        output.WriteRawTag(18);
        output.WriteString(Locale);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasFileName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FileName);
      }
      if (HasLocale) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Locale);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TextFileEntry other) {
      if (other == null) {
        return;
      }
      if (other.HasFileName) {
        FileName = other.FileName;
      }
      if (other.HasLocale) {
        Locale = other.Locale;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FileName = input.ReadString();
            break;
          }
          case 18: {
            Locale = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FileName = input.ReadString();
            break;
          }
          case 18: {
            Locale = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TextFileList : pb::IMessage<TextFileList>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TextFileList> _parser = new pb::MessageParser<TextFileList>(() => new TextFileList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TextFileList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Uplay.DownloadInstallState.DownloadInstallStateReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TextFileList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TextFileList(TextFileList other) : this() {
      rootPath_ = other.rootPath_;
      files_ = other.files_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TextFileList Clone() {
      return new TextFileList(this);
    }

    /// <summary>Field number for the "rootPath" field.</summary>
    public const int RootPathFieldNumber = 1;
    private readonly static string RootPathDefaultValue = "";

    private string rootPath_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RootPath {
      get { return rootPath_ ?? RootPathDefaultValue; }
      set {
        rootPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "rootPath" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRootPath {
      get { return rootPath_ != null; }
    }
    /// <summary>Clears the value of the "rootPath" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRootPath() {
      rootPath_ = null;
    }

    /// <summary>Field number for the "files" field.</summary>
    public const int FilesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Uplay.DownloadInstallState.TextFileEntry> _repeated_files_codec
        = pb::FieldCodec.ForMessage(18, global::Uplay.DownloadInstallState.TextFileEntry.Parser);
    private readonly pbc::RepeatedField<global::Uplay.DownloadInstallState.TextFileEntry> files_ = new pbc::RepeatedField<global::Uplay.DownloadInstallState.TextFileEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Uplay.DownloadInstallState.TextFileEntry> Files {
      get { return files_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TextFileList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TextFileList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RootPath != other.RootPath) return false;
      if(!files_.Equals(other.files_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRootPath) hash ^= RootPath.GetHashCode();
      hash ^= files_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasRootPath) {
        output.WriteRawTag(10);
        output.WriteString(RootPath);
      }
      files_.WriteTo(output, _repeated_files_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasRootPath) {
        output.WriteRawTag(10);
        output.WriteString(RootPath);
      }
      files_.WriteTo(ref output, _repeated_files_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasRootPath) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RootPath);
      }
      size += files_.CalculateSize(_repeated_files_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TextFileList other) {
      if (other == null) {
        return;
      }
      if (other.HasRootPath) {
        RootPath = other.RootPath;
      }
      files_.Add(other.files_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RootPath = input.ReadString();
            break;
          }
          case 18: {
            files_.AddEntriesFrom(input, _repeated_files_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            RootPath = input.ReadString();
            break;
          }
          case 18: {
            files_.AddEntriesFrom(ref input, _repeated_files_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DownloadInstallState : pb::IMessage<DownloadInstallState>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DownloadInstallState> _parser = new pb::MessageParser<DownloadInstallState>(() => new DownloadInstallState());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<DownloadInstallState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Uplay.DownloadInstallState.DownloadInstallStateReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DownloadInstallState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DownloadInstallState(DownloadInstallState other) : this() {
      _hasBits0 = other._hasBits0;
      manifestSha1_ = other.manifestSha1_;
      downloadingSha1_ = other.downloadingSha1_;
      version_ = other.version_;
      selectedLanguage_ = other.selectedLanguage_;
      licenses_ = other.licenses_.Clone();
      installers_ = other.installers_.Clone();
      chunks_ = other.chunks_.Clone();
      shortcutName_ = other.shortcutName_;
      shortcuts_ = other.shortcuts_.Clone();
      registryEntries_ = other.registryEntries_.Clone();
      languages_ = other.languages_.Clone();
      downloadingLanguages_ = other.downloadingLanguages_.Clone();
      patchRequired_ = other.patchRequired_;
      bytesDownloadedOnPatchStart_ = other.bytesDownloadedOnPatchStart_;
      requiredBytesDownloadedOnPatchStart_ = other.requiredBytesDownloadedOnPatchStart_;
      gameName_ = other.gameName_;
      readmeFiles_ = other.readmeFiles_ != null ? other.readmeFiles_.Clone() : null;
      manualFiles_ = other.manualFiles_ != null ? other.manualFiles_.Clone() : null;
      gameVersion_ = other.gameVersion_;
      installedLanguages_ = other.installedLanguages_.Clone();
      installedAddons_ = other.installedAddons_.Clone();
      uplayId_ = other.uplayId_;
      invalidateGameTokenRequired_ = other.invalidateGameTokenRequired_;
      epicRunInstallation_ = other.epicRunInstallation_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DownloadInstallState Clone() {
      return new DownloadInstallState(this);
    }

    /// <summary>Field number for the "manifest_sha1" field.</summary>
    public const int ManifestSha1FieldNumber = 1;
    private readonly static string ManifestSha1DefaultValue = "";

    private string manifestSha1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ManifestSha1 {
      get { return manifestSha1_ ?? ManifestSha1DefaultValue; }
      set {
        manifestSha1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "manifest_sha1" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasManifestSha1 {
      get { return manifestSha1_ != null; }
    }
    /// <summary>Clears the value of the "manifest_sha1" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearManifestSha1() {
      manifestSha1_ = null;
    }

    /// <summary>Field number for the "downloading_sha1" field.</summary>
    public const int DownloadingSha1FieldNumber = 10;
    private readonly static string DownloadingSha1DefaultValue = "";

    private string downloadingSha1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DownloadingSha1 {
      get { return downloadingSha1_ ?? DownloadingSha1DefaultValue; }
      set {
        downloadingSha1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "downloading_sha1" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDownloadingSha1 {
      get { return downloadingSha1_ != null; }
    }
    /// <summary>Clears the value of the "downloading_sha1" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDownloadingSha1() {
      downloadingSha1_ = null;
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 2;
    private readonly static uint VersionDefaultValue = 0;

    private uint version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Version {
      get { if ((_hasBits0 & 1) != 0) { return version_; } else { return VersionDefaultValue; } }
      set {
        _hasBits0 |= 1;
        version_ = value;
      }
    }
    /// <summary>Gets whether the "version" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVersion {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "version" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVersion() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "selected_language" field.</summary>
    public const int SelectedLanguageFieldNumber = 3;
    private readonly static string SelectedLanguageDefaultValue = "";

    private string selectedLanguage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SelectedLanguage {
      get { return selectedLanguage_ ?? SelectedLanguageDefaultValue; }
      set {
        selectedLanguage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "selected_language" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSelectedLanguage {
      get { return selectedLanguage_ != null; }
    }
    /// <summary>Clears the value of the "selected_language" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSelectedLanguage() {
      selectedLanguage_ = null;
    }

    /// <summary>Field number for the "licenses" field.</summary>
    public const int LicensesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Uplay.DownloadInstallState.License> _repeated_licenses_codec
        = pb::FieldCodec.ForMessage(34, global::Uplay.DownloadInstallState.License.Parser);
    private readonly pbc::RepeatedField<global::Uplay.DownloadInstallState.License> licenses_ = new pbc::RepeatedField<global::Uplay.DownloadInstallState.License>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Uplay.DownloadInstallState.License> Licenses {
      get { return licenses_; }
    }

    /// <summary>Field number for the "installers" field.</summary>
    public const int InstallersFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Uplay.DownloadInstallState.Installer> _repeated_installers_codec
        = pb::FieldCodec.ForMessage(42, global::Uplay.DownloadInstallState.Installer.Parser);
    private readonly pbc::RepeatedField<global::Uplay.DownloadInstallState.Installer> installers_ = new pbc::RepeatedField<global::Uplay.DownloadInstallState.Installer>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Uplay.DownloadInstallState.Installer> Installers {
      get { return installers_; }
    }

    /// <summary>Field number for the "chunks" field.</summary>
    public const int ChunksFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Uplay.DownloadInstallState.Chunk> _repeated_chunks_codec
        = pb::FieldCodec.ForMessage(50, global::Uplay.DownloadInstallState.Chunk.Parser);
    private readonly pbc::RepeatedField<global::Uplay.DownloadInstallState.Chunk> chunks_ = new pbc::RepeatedField<global::Uplay.DownloadInstallState.Chunk>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Uplay.DownloadInstallState.Chunk> Chunks {
      get { return chunks_; }
    }

    /// <summary>Field number for the "shortcut_name" field.</summary>
    public const int ShortcutNameFieldNumber = 11;
    private readonly static string ShortcutNameDefaultValue = "";

    private string shortcutName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ShortcutName {
      get { return shortcutName_ ?? ShortcutNameDefaultValue; }
      set {
        shortcutName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "shortcut_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasShortcutName {
      get { return shortcutName_ != null; }
    }
    /// <summary>Clears the value of the "shortcut_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearShortcutName() {
      shortcutName_ = null;
    }

    /// <summary>Field number for the "shortcuts" field.</summary>
    public const int ShortcutsFieldNumber = 13;
    private static readonly pb::FieldCodec<global::Uplay.DownloadInstallState.Shortcut> _repeated_shortcuts_codec
        = pb::FieldCodec.ForMessage(106, global::Uplay.DownloadInstallState.Shortcut.Parser);
    private readonly pbc::RepeatedField<global::Uplay.DownloadInstallState.Shortcut> shortcuts_ = new pbc::RepeatedField<global::Uplay.DownloadInstallState.Shortcut>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Uplay.DownloadInstallState.Shortcut> Shortcuts {
      get { return shortcuts_; }
    }

    /// <summary>Field number for the "registry_entries" field.</summary>
    public const int RegistryEntriesFieldNumber = 15;
    private static readonly pb::FieldCodec<global::Uplay.DownloadInstallState.RegistryEntry> _repeated_registryEntries_codec
        = pb::FieldCodec.ForMessage(122, global::Uplay.DownloadInstallState.RegistryEntry.Parser);
    private readonly pbc::RepeatedField<global::Uplay.DownloadInstallState.RegistryEntry> registryEntries_ = new pbc::RepeatedField<global::Uplay.DownloadInstallState.RegistryEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Uplay.DownloadInstallState.RegistryEntry> RegistryEntries {
      get { return registryEntries_; }
    }

    /// <summary>Field number for the "languages" field.</summary>
    public const int LanguagesFieldNumber = 17;
    private static readonly pb::FieldCodec<string> _repeated_languages_codec
        = pb::FieldCodec.ForString(138);
    private readonly pbc::RepeatedField<string> languages_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> Languages {
      get { return languages_; }
    }

    /// <summary>Field number for the "downloading_languages" field.</summary>
    public const int DownloadingLanguagesFieldNumber = 18;
    private static readonly pb::FieldCodec<string> _repeated_downloadingLanguages_codec
        = pb::FieldCodec.ForString(146);
    private readonly pbc::RepeatedField<string> downloadingLanguages_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> DownloadingLanguages {
      get { return downloadingLanguages_; }
    }

    /// <summary>Field number for the "patch_required" field.</summary>
    public const int PatchRequiredFieldNumber = 19;
    private readonly static bool PatchRequiredDefaultValue = false;

    private bool patchRequired_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool PatchRequired {
      get { if ((_hasBits0 & 2) != 0) { return patchRequired_; } else { return PatchRequiredDefaultValue; } }
      set {
        _hasBits0 |= 2;
        patchRequired_ = value;
      }
    }
    /// <summary>Gets whether the "patch_required" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPatchRequired {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "patch_required" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPatchRequired() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "bytes_downloaded_on_patch_start" field.</summary>
    public const int BytesDownloadedOnPatchStartFieldNumber = 20;
    private readonly static ulong BytesDownloadedOnPatchStartDefaultValue = 0UL;

    private ulong bytesDownloadedOnPatchStart_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong BytesDownloadedOnPatchStart {
      get { if ((_hasBits0 & 4) != 0) { return bytesDownloadedOnPatchStart_; } else { return BytesDownloadedOnPatchStartDefaultValue; } }
      set {
        _hasBits0 |= 4;
        bytesDownloadedOnPatchStart_ = value;
      }
    }
    /// <summary>Gets whether the "bytes_downloaded_on_patch_start" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBytesDownloadedOnPatchStart {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "bytes_downloaded_on_patch_start" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBytesDownloadedOnPatchStart() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "required_bytes_downloaded_on_patch_start" field.</summary>
    public const int RequiredBytesDownloadedOnPatchStartFieldNumber = 21;
    private readonly static ulong RequiredBytesDownloadedOnPatchStartDefaultValue = 0UL;

    private ulong requiredBytesDownloadedOnPatchStart_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong RequiredBytesDownloadedOnPatchStart {
      get { if ((_hasBits0 & 8) != 0) { return requiredBytesDownloadedOnPatchStart_; } else { return RequiredBytesDownloadedOnPatchStartDefaultValue; } }
      set {
        _hasBits0 |= 8;
        requiredBytesDownloadedOnPatchStart_ = value;
      }
    }
    /// <summary>Gets whether the "required_bytes_downloaded_on_patch_start" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRequiredBytesDownloadedOnPatchStart {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "required_bytes_downloaded_on_patch_start" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRequiredBytesDownloadedOnPatchStart() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "game_name" field.</summary>
    public const int GameNameFieldNumber = 22;
    private readonly static string GameNameDefaultValue = "";

    private string gameName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string GameName {
      get { return gameName_ ?? GameNameDefaultValue; }
      set {
        gameName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "game_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGameName {
      get { return gameName_ != null; }
    }
    /// <summary>Clears the value of the "game_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGameName() {
      gameName_ = null;
    }

    /// <summary>Field number for the "readmeFiles" field.</summary>
    public const int ReadmeFilesFieldNumber = 23;
    private global::Uplay.DownloadInstallState.TextFileList readmeFiles_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Uplay.DownloadInstallState.TextFileList ReadmeFiles {
      get { return readmeFiles_; }
      set {
        readmeFiles_ = value;
      }
    }

    /// <summary>Field number for the "manualFiles" field.</summary>
    public const int ManualFilesFieldNumber = 24;
    private global::Uplay.DownloadInstallState.TextFileList manualFiles_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Uplay.DownloadInstallState.TextFileList ManualFiles {
      get { return manualFiles_; }
      set {
        manualFiles_ = value;
      }
    }

    /// <summary>Field number for the "game_version" field.</summary>
    public const int GameVersionFieldNumber = 25;
    private readonly static string GameVersionDefaultValue = "";

    private string gameVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string GameVersion {
      get { return gameVersion_ ?? GameVersionDefaultValue; }
      set {
        gameVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "game_version" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGameVersion {
      get { return gameVersion_ != null; }
    }
    /// <summary>Clears the value of the "game_version" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGameVersion() {
      gameVersion_ = null;
    }

    /// <summary>Field number for the "installed_languages" field.</summary>
    public const int InstalledLanguagesFieldNumber = 26;
    private static readonly pb::FieldCodec<string> _repeated_installedLanguages_codec
        = pb::FieldCodec.ForString(210);
    private readonly pbc::RepeatedField<string> installedLanguages_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> InstalledLanguages {
      get { return installedLanguages_; }
    }

    /// <summary>Field number for the "installed_addons" field.</summary>
    public const int InstalledAddonsFieldNumber = 27;
    private static readonly pb::FieldCodec<uint> _repeated_installedAddons_codec
        = pb::FieldCodec.ForUInt32(216);
    private readonly pbc::RepeatedField<uint> installedAddons_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<uint> InstalledAddons {
      get { return installedAddons_; }
    }

    /// <summary>Field number for the "uplay_id" field.</summary>
    public const int UplayIdFieldNumber = 28;
    private readonly static uint UplayIdDefaultValue = 0;

    private uint uplayId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint UplayId {
      get { if ((_hasBits0 & 16) != 0) { return uplayId_; } else { return UplayIdDefaultValue; } }
      set {
        _hasBits0 |= 16;
        uplayId_ = value;
      }
    }
    /// <summary>Gets whether the "uplay_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUplayId {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "uplay_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUplayId() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "invalidate_game_token_required" field.</summary>
    public const int InvalidateGameTokenRequiredFieldNumber = 29;
    private readonly static bool InvalidateGameTokenRequiredDefaultValue = false;

    private bool invalidateGameTokenRequired_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool InvalidateGameTokenRequired {
      get { if ((_hasBits0 & 32) != 0) { return invalidateGameTokenRequired_; } else { return InvalidateGameTokenRequiredDefaultValue; } }
      set {
        _hasBits0 |= 32;
        invalidateGameTokenRequired_ = value;
      }
    }
    /// <summary>Gets whether the "invalidate_game_token_required" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasInvalidateGameTokenRequired {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "invalidate_game_token_required" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearInvalidateGameTokenRequired() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "epic_run_installation" field.</summary>
    public const int EpicRunInstallationFieldNumber = 30;
    private readonly static bool EpicRunInstallationDefaultValue = false;

    private bool epicRunInstallation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool EpicRunInstallation {
      get { if ((_hasBits0 & 64) != 0) { return epicRunInstallation_; } else { return EpicRunInstallationDefaultValue; } }
      set {
        _hasBits0 |= 64;
        epicRunInstallation_ = value;
      }
    }
    /// <summary>Gets whether the "epic_run_installation" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEpicRunInstallation {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "epic_run_installation" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEpicRunInstallation() {
      _hasBits0 &= ~64;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as DownloadInstallState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(DownloadInstallState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ManifestSha1 != other.ManifestSha1) return false;
      if (DownloadingSha1 != other.DownloadingSha1) return false;
      if (Version != other.Version) return false;
      if (SelectedLanguage != other.SelectedLanguage) return false;
      if(!licenses_.Equals(other.licenses_)) return false;
      if(!installers_.Equals(other.installers_)) return false;
      if(!chunks_.Equals(other.chunks_)) return false;
      if (ShortcutName != other.ShortcutName) return false;
      if(!shortcuts_.Equals(other.shortcuts_)) return false;
      if(!registryEntries_.Equals(other.registryEntries_)) return false;
      if(!languages_.Equals(other.languages_)) return false;
      if(!downloadingLanguages_.Equals(other.downloadingLanguages_)) return false;
      if (PatchRequired != other.PatchRequired) return false;
      if (BytesDownloadedOnPatchStart != other.BytesDownloadedOnPatchStart) return false;
      if (RequiredBytesDownloadedOnPatchStart != other.RequiredBytesDownloadedOnPatchStart) return false;
      if (GameName != other.GameName) return false;
      if (!object.Equals(ReadmeFiles, other.ReadmeFiles)) return false;
      if (!object.Equals(ManualFiles, other.ManualFiles)) return false;
      if (GameVersion != other.GameVersion) return false;
      if(!installedLanguages_.Equals(other.installedLanguages_)) return false;
      if(!installedAddons_.Equals(other.installedAddons_)) return false;
      if (UplayId != other.UplayId) return false;
      if (InvalidateGameTokenRequired != other.InvalidateGameTokenRequired) return false;
      if (EpicRunInstallation != other.EpicRunInstallation) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasManifestSha1) hash ^= ManifestSha1.GetHashCode();
      if (HasDownloadingSha1) hash ^= DownloadingSha1.GetHashCode();
      if (HasVersion) hash ^= Version.GetHashCode();
      if (HasSelectedLanguage) hash ^= SelectedLanguage.GetHashCode();
      hash ^= licenses_.GetHashCode();
      hash ^= installers_.GetHashCode();
      hash ^= chunks_.GetHashCode();
      if (HasShortcutName) hash ^= ShortcutName.GetHashCode();
      hash ^= shortcuts_.GetHashCode();
      hash ^= registryEntries_.GetHashCode();
      hash ^= languages_.GetHashCode();
      hash ^= downloadingLanguages_.GetHashCode();
      if (HasPatchRequired) hash ^= PatchRequired.GetHashCode();
      if (HasBytesDownloadedOnPatchStart) hash ^= BytesDownloadedOnPatchStart.GetHashCode();
      if (HasRequiredBytesDownloadedOnPatchStart) hash ^= RequiredBytesDownloadedOnPatchStart.GetHashCode();
      if (HasGameName) hash ^= GameName.GetHashCode();
      if (readmeFiles_ != null) hash ^= ReadmeFiles.GetHashCode();
      if (manualFiles_ != null) hash ^= ManualFiles.GetHashCode();
      if (HasGameVersion) hash ^= GameVersion.GetHashCode();
      hash ^= installedLanguages_.GetHashCode();
      hash ^= installedAddons_.GetHashCode();
      if (HasUplayId) hash ^= UplayId.GetHashCode();
      if (HasInvalidateGameTokenRequired) hash ^= InvalidateGameTokenRequired.GetHashCode();
      if (HasEpicRunInstallation) hash ^= EpicRunInstallation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasManifestSha1) {
        output.WriteRawTag(10);
        output.WriteString(ManifestSha1);
      }
      if (HasVersion) {
        output.WriteRawTag(16);
        output.WriteUInt32(Version);
      }
      if (HasSelectedLanguage) {
        output.WriteRawTag(26);
        output.WriteString(SelectedLanguage);
      }
      licenses_.WriteTo(output, _repeated_licenses_codec);
      installers_.WriteTo(output, _repeated_installers_codec);
      chunks_.WriteTo(output, _repeated_chunks_codec);
      if (HasDownloadingSha1) {
        output.WriteRawTag(82);
        output.WriteString(DownloadingSha1);
      }
      if (HasShortcutName) {
        output.WriteRawTag(90);
        output.WriteString(ShortcutName);
      }
      shortcuts_.WriteTo(output, _repeated_shortcuts_codec);
      registryEntries_.WriteTo(output, _repeated_registryEntries_codec);
      languages_.WriteTo(output, _repeated_languages_codec);
      downloadingLanguages_.WriteTo(output, _repeated_downloadingLanguages_codec);
      if (HasPatchRequired) {
        output.WriteRawTag(152, 1);
        output.WriteBool(PatchRequired);
      }
      if (HasBytesDownloadedOnPatchStart) {
        output.WriteRawTag(160, 1);
        output.WriteUInt64(BytesDownloadedOnPatchStart);
      }
      if (HasRequiredBytesDownloadedOnPatchStart) {
        output.WriteRawTag(168, 1);
        output.WriteUInt64(RequiredBytesDownloadedOnPatchStart);
      }
      if (HasGameName) {
        output.WriteRawTag(178, 1);
        output.WriteString(GameName);
      }
      if (readmeFiles_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(ReadmeFiles);
      }
      if (manualFiles_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(ManualFiles);
      }
      if (HasGameVersion) {
        output.WriteRawTag(202, 1);
        output.WriteString(GameVersion);
      }
      installedLanguages_.WriteTo(output, _repeated_installedLanguages_codec);
      installedAddons_.WriteTo(output, _repeated_installedAddons_codec);
      if (HasUplayId) {
        output.WriteRawTag(224, 1);
        output.WriteUInt32(UplayId);
      }
      if (HasInvalidateGameTokenRequired) {
        output.WriteRawTag(232, 1);
        output.WriteBool(InvalidateGameTokenRequired);
      }
      if (HasEpicRunInstallation) {
        output.WriteRawTag(240, 1);
        output.WriteBool(EpicRunInstallation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasManifestSha1) {
        output.WriteRawTag(10);
        output.WriteString(ManifestSha1);
      }
      if (HasVersion) {
        output.WriteRawTag(16);
        output.WriteUInt32(Version);
      }
      if (HasSelectedLanguage) {
        output.WriteRawTag(26);
        output.WriteString(SelectedLanguage);
      }
      licenses_.WriteTo(ref output, _repeated_licenses_codec);
      installers_.WriteTo(ref output, _repeated_installers_codec);
      chunks_.WriteTo(ref output, _repeated_chunks_codec);
      if (HasDownloadingSha1) {
        output.WriteRawTag(82);
        output.WriteString(DownloadingSha1);
      }
      if (HasShortcutName) {
        output.WriteRawTag(90);
        output.WriteString(ShortcutName);
      }
      shortcuts_.WriteTo(ref output, _repeated_shortcuts_codec);
      registryEntries_.WriteTo(ref output, _repeated_registryEntries_codec);
      languages_.WriteTo(ref output, _repeated_languages_codec);
      downloadingLanguages_.WriteTo(ref output, _repeated_downloadingLanguages_codec);
      if (HasPatchRequired) {
        output.WriteRawTag(152, 1);
        output.WriteBool(PatchRequired);
      }
      if (HasBytesDownloadedOnPatchStart) {
        output.WriteRawTag(160, 1);
        output.WriteUInt64(BytesDownloadedOnPatchStart);
      }
      if (HasRequiredBytesDownloadedOnPatchStart) {
        output.WriteRawTag(168, 1);
        output.WriteUInt64(RequiredBytesDownloadedOnPatchStart);
      }
      if (HasGameName) {
        output.WriteRawTag(178, 1);
        output.WriteString(GameName);
      }
      if (readmeFiles_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(ReadmeFiles);
      }
      if (manualFiles_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(ManualFiles);
      }
      if (HasGameVersion) {
        output.WriteRawTag(202, 1);
        output.WriteString(GameVersion);
      }
      installedLanguages_.WriteTo(ref output, _repeated_installedLanguages_codec);
      installedAddons_.WriteTo(ref output, _repeated_installedAddons_codec);
      if (HasUplayId) {
        output.WriteRawTag(224, 1);
        output.WriteUInt32(UplayId);
      }
      if (HasInvalidateGameTokenRequired) {
        output.WriteRawTag(232, 1);
        output.WriteBool(InvalidateGameTokenRequired);
      }
      if (HasEpicRunInstallation) {
        output.WriteRawTag(240, 1);
        output.WriteBool(EpicRunInstallation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasManifestSha1) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ManifestSha1);
      }
      if (HasDownloadingSha1) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DownloadingSha1);
      }
      if (HasVersion) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
      }
      if (HasSelectedLanguage) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SelectedLanguage);
      }
      size += licenses_.CalculateSize(_repeated_licenses_codec);
      size += installers_.CalculateSize(_repeated_installers_codec);
      size += chunks_.CalculateSize(_repeated_chunks_codec);
      if (HasShortcutName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShortcutName);
      }
      size += shortcuts_.CalculateSize(_repeated_shortcuts_codec);
      size += registryEntries_.CalculateSize(_repeated_registryEntries_codec);
      size += languages_.CalculateSize(_repeated_languages_codec);
      size += downloadingLanguages_.CalculateSize(_repeated_downloadingLanguages_codec);
      if (HasPatchRequired) {
        size += 2 + 1;
      }
      if (HasBytesDownloadedOnPatchStart) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(BytesDownloadedOnPatchStart);
      }
      if (HasRequiredBytesDownloadedOnPatchStart) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(RequiredBytesDownloadedOnPatchStart);
      }
      if (HasGameName) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(GameName);
      }
      if (readmeFiles_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ReadmeFiles);
      }
      if (manualFiles_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ManualFiles);
      }
      if (HasGameVersion) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(GameVersion);
      }
      size += installedLanguages_.CalculateSize(_repeated_installedLanguages_codec);
      size += installedAddons_.CalculateSize(_repeated_installedAddons_codec);
      if (HasUplayId) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(UplayId);
      }
      if (HasInvalidateGameTokenRequired) {
        size += 2 + 1;
      }
      if (HasEpicRunInstallation) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(DownloadInstallState other) {
      if (other == null) {
        return;
      }
      if (other.HasManifestSha1) {
        ManifestSha1 = other.ManifestSha1;
      }
      if (other.HasDownloadingSha1) {
        DownloadingSha1 = other.DownloadingSha1;
      }
      if (other.HasVersion) {
        Version = other.Version;
      }
      if (other.HasSelectedLanguage) {
        SelectedLanguage = other.SelectedLanguage;
      }
      licenses_.Add(other.licenses_);
      installers_.Add(other.installers_);
      chunks_.Add(other.chunks_);
      if (other.HasShortcutName) {
        ShortcutName = other.ShortcutName;
      }
      shortcuts_.Add(other.shortcuts_);
      registryEntries_.Add(other.registryEntries_);
      languages_.Add(other.languages_);
      downloadingLanguages_.Add(other.downloadingLanguages_);
      if (other.HasPatchRequired) {
        PatchRequired = other.PatchRequired;
      }
      if (other.HasBytesDownloadedOnPatchStart) {
        BytesDownloadedOnPatchStart = other.BytesDownloadedOnPatchStart;
      }
      if (other.HasRequiredBytesDownloadedOnPatchStart) {
        RequiredBytesDownloadedOnPatchStart = other.RequiredBytesDownloadedOnPatchStart;
      }
      if (other.HasGameName) {
        GameName = other.GameName;
      }
      if (other.readmeFiles_ != null) {
        if (readmeFiles_ == null) {
          ReadmeFiles = new global::Uplay.DownloadInstallState.TextFileList();
        }
        ReadmeFiles.MergeFrom(other.ReadmeFiles);
      }
      if (other.manualFiles_ != null) {
        if (manualFiles_ == null) {
          ManualFiles = new global::Uplay.DownloadInstallState.TextFileList();
        }
        ManualFiles.MergeFrom(other.ManualFiles);
      }
      if (other.HasGameVersion) {
        GameVersion = other.GameVersion;
      }
      installedLanguages_.Add(other.installedLanguages_);
      installedAddons_.Add(other.installedAddons_);
      if (other.HasUplayId) {
        UplayId = other.UplayId;
      }
      if (other.HasInvalidateGameTokenRequired) {
        InvalidateGameTokenRequired = other.InvalidateGameTokenRequired;
      }
      if (other.HasEpicRunInstallation) {
        EpicRunInstallation = other.EpicRunInstallation;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ManifestSha1 = input.ReadString();
            break;
          }
          case 16: {
            Version = input.ReadUInt32();
            break;
          }
          case 26: {
            SelectedLanguage = input.ReadString();
            break;
          }
          case 34: {
            licenses_.AddEntriesFrom(input, _repeated_licenses_codec);
            break;
          }
          case 42: {
            installers_.AddEntriesFrom(input, _repeated_installers_codec);
            break;
          }
          case 50: {
            chunks_.AddEntriesFrom(input, _repeated_chunks_codec);
            break;
          }
          case 82: {
            DownloadingSha1 = input.ReadString();
            break;
          }
          case 90: {
            ShortcutName = input.ReadString();
            break;
          }
          case 106: {
            shortcuts_.AddEntriesFrom(input, _repeated_shortcuts_codec);
            break;
          }
          case 122: {
            registryEntries_.AddEntriesFrom(input, _repeated_registryEntries_codec);
            break;
          }
          case 138: {
            languages_.AddEntriesFrom(input, _repeated_languages_codec);
            break;
          }
          case 146: {
            downloadingLanguages_.AddEntriesFrom(input, _repeated_downloadingLanguages_codec);
            break;
          }
          case 152: {
            PatchRequired = input.ReadBool();
            break;
          }
          case 160: {
            BytesDownloadedOnPatchStart = input.ReadUInt64();
            break;
          }
          case 168: {
            RequiredBytesDownloadedOnPatchStart = input.ReadUInt64();
            break;
          }
          case 178: {
            GameName = input.ReadString();
            break;
          }
          case 186: {
            if (readmeFiles_ == null) {
              ReadmeFiles = new global::Uplay.DownloadInstallState.TextFileList();
            }
            input.ReadMessage(ReadmeFiles);
            break;
          }
          case 194: {
            if (manualFiles_ == null) {
              ManualFiles = new global::Uplay.DownloadInstallState.TextFileList();
            }
            input.ReadMessage(ManualFiles);
            break;
          }
          case 202: {
            GameVersion = input.ReadString();
            break;
          }
          case 210: {
            installedLanguages_.AddEntriesFrom(input, _repeated_installedLanguages_codec);
            break;
          }
          case 218:
          case 216: {
            installedAddons_.AddEntriesFrom(input, _repeated_installedAddons_codec);
            break;
          }
          case 224: {
            UplayId = input.ReadUInt32();
            break;
          }
          case 232: {
            InvalidateGameTokenRequired = input.ReadBool();
            break;
          }
          case 240: {
            EpicRunInstallation = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ManifestSha1 = input.ReadString();
            break;
          }
          case 16: {
            Version = input.ReadUInt32();
            break;
          }
          case 26: {
            SelectedLanguage = input.ReadString();
            break;
          }
          case 34: {
            licenses_.AddEntriesFrom(ref input, _repeated_licenses_codec);
            break;
          }
          case 42: {
            installers_.AddEntriesFrom(ref input, _repeated_installers_codec);
            break;
          }
          case 50: {
            chunks_.AddEntriesFrom(ref input, _repeated_chunks_codec);
            break;
          }
          case 82: {
            DownloadingSha1 = input.ReadString();
            break;
          }
          case 90: {
            ShortcutName = input.ReadString();
            break;
          }
          case 106: {
            shortcuts_.AddEntriesFrom(ref input, _repeated_shortcuts_codec);
            break;
          }
          case 122: {
            registryEntries_.AddEntriesFrom(ref input, _repeated_registryEntries_codec);
            break;
          }
          case 138: {
            languages_.AddEntriesFrom(ref input, _repeated_languages_codec);
            break;
          }
          case 146: {
            downloadingLanguages_.AddEntriesFrom(ref input, _repeated_downloadingLanguages_codec);
            break;
          }
          case 152: {
            PatchRequired = input.ReadBool();
            break;
          }
          case 160: {
            BytesDownloadedOnPatchStart = input.ReadUInt64();
            break;
          }
          case 168: {
            RequiredBytesDownloadedOnPatchStart = input.ReadUInt64();
            break;
          }
          case 178: {
            GameName = input.ReadString();
            break;
          }
          case 186: {
            if (readmeFiles_ == null) {
              ReadmeFiles = new global::Uplay.DownloadInstallState.TextFileList();
            }
            input.ReadMessage(ReadmeFiles);
            break;
          }
          case 194: {
            if (manualFiles_ == null) {
              ManualFiles = new global::Uplay.DownloadInstallState.TextFileList();
            }
            input.ReadMessage(ManualFiles);
            break;
          }
          case 202: {
            GameVersion = input.ReadString();
            break;
          }
          case 210: {
            installedLanguages_.AddEntriesFrom(ref input, _repeated_installedLanguages_codec);
            break;
          }
          case 218:
          case 216: {
            installedAddons_.AddEntriesFrom(ref input, _repeated_installedAddons_codec);
            break;
          }
          case 224: {
            UplayId = input.ReadUInt32();
            break;
          }
          case 232: {
            InvalidateGameTokenRequired = input.ReadBool();
            break;
          }
          case 240: {
            EpicRunInstallation = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
