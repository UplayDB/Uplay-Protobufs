// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: game_starter.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Uplay.GameStarter {

  /// <summary>Holder for reflection information generated from game_starter.proto</summary>
  public static partial class GameStarterReflection {

    #region Descriptor
    /// <summary>File descriptor for game_starter.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GameStarterReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch51cGNfZHVtcF8xMC9nYW1lX3N0YXJ0ZXIucHJvdG8SGG1nLnByb3RvY29s",
            "LmdhbWVfc3RhcnRlciIvChFSaWNoUHJlc2VuY2VUb2tlbhILCgNrZXkYASAB",
            "KAkSDQoFdmFsdWUYAiABKAkiXQoTRGlzY29yZFJpY2hQcmVzZW5jZRIOCgZh",
            "cHBfaWQYASABKAkSEwoLbGFyZ2VfaW1hZ2UYAiABKAkSEwoLc21hbGxfaW1h",
            "Z2UYAyABKAkSDAoEdGV4dBgFIAEoCSI6ChRTdGVhbVByb29mT2ZQdXJjaGFz",
            "ZRISCgpzdGVhbUFwcElkGAEgAigNEg4KBnRpY2tldBgCIAIoCSJWCgpPY3Vs",
            "dXNJbmZvEg0KBWFwcElkGAEgASgJEg4KBnVzZXJJZBgCIAEoCRIUCgxvY3Vs",
            "dXNVc2VySWQYAyABKAkSEwoLYWNjZXNzVG9rZW4YBCABKAkiIQoKTnZpZGlh",
            "SW5mbxITCgthY2Nlc3NUb2tlbhgBIAEoCSIiCgpXZUdhbWVJbmZvEhQKDHJh",
            "aWxfZ2FtZV9pZBgBIAEoBCKNBgoIU3RhcnRSZXESFwoPbGF1bmNoZXJWZXJz",
            "aW9uGAEgAigNEg8KB3VwbGF5SWQYAiACKA0SEQoJc3RlYW1HYW1lGAMgAigI",
            "EhMKC2dhbWVWZXJzaW9uGAQgAigNEhEKCXByb2R1Y3RJZBgFIAEoDRIYChBz",
            "aW11bGF0aW9uQ29uZmlnGAcgASgJEhMKC3N0ZWFtVGlja2V0GAggASgJEg8K",
            "B3N0ZWFtSWQYCSABKAkSFgoOZXhlY3V0YWJsZVBhdGgYCiABKAkSGwoTZXhl",
            "Y3V0YWJsZUFyZ3VtZW50cxgLIAEoCRIRCgl0aW1lU3RhcnQYDCABKAQSGgoS",
            "c3RlYW1GcmVlUGFja2FnZUlkGA0gASgNEh4KFnN0ZWFtUmVxdWlyZWRQcm9k",
            "dWN0SWQYDiABKA0STAoUc3RlYW1Qcm9vZk9mUHVyY2hhc2UYDyADKAsyLi5t",
            "Zy5wcm90b2NvbC5nYW1lX3N0YXJ0ZXIuU3RlYW1Qcm9vZk9mUHVyY2hhc2US",
            "OAoKb2N1bHVzSW5mbxgQIAEoCzIkLm1nLnByb3RvY29sLmdhbWVfc3RhcnRl",
            "ci5PY3VsdXNJbmZvEj0KCHBsYXRmb3JtGBEgASgOMisubWcucHJvdG9jb2wu",
            "Z2FtZV9zdGFydGVyLlN0YXJ0UmVxLlBsYXRmb3JtEhQKDHN0ZWFtT3duZXJJ",
            "ZBgSIAEoCRI4CgpudmlkaWFJbmZvGBMgASgLMiQubWcucHJvdG9jb2wuZ2Ft",
            "ZV9zdGFydGVyLk52aWRpYUluZm8SOAoKd2VHYW1lSW5mbxgUIAEoCzIkLm1n",
            "LnByb3RvY29sLmdhbWVfc3RhcnRlci5XZUdhbWVJbmZvIoYBCghQbGF0Zm9y",
            "bRISCg5QbGF0Zm9ybV9VcGxheRABEhIKDlBsYXRmb3JtX1N0ZWFtEAISEwoP",
            "UGxhdGZvcm1fT2N1bHVzEAMSEwoPUGxhdGZvcm1fTnZpZGlhEAQSEwoPUGxh",
            "dGZvcm1fU3dpdGNoEAUSEwoPUGxhdGZvcm1fV2VHYW1lEAYiPgoVSG90a2V5",
            "U3RhdGVDaGFuZ2VkUmVxEhIKCmhvdGtleVR5cGUYASACKAUSEQoJaXNQcmVz",
            "c2VkGAIgAigIImkKBkhvdGtleRISCgpob3RrZXlUeXBlGAEgAigFEg8KB2tl",
            "eUNvZGUYAiACKA0SEAoIYWx0U3RhdGUYAyACKAgSEgoKc2hpZnRTdGF0ZRgE",
            "IAIoCBIUCgxjb250cm9sU3RhdGUYBSACKAgiPAoHSG90a2V5cxIxCgdob3Rr",
            "ZXlzGAEgAygLMiAubWcucHJvdG9jb2wuZ2FtZV9zdGFydGVyLkhvdGtleSLO",
            "AwoPU3RhcnRHcmFudGVkUnNwEhYKDm92ZXJsYXlFbmFibGVkGAEgAigIEhQK",
            "DHdpbmRvd2VkTW9kZRgCIAIoCBIWCg5leGVjdXRhYmxlUGF0aBgDIAEoCRIY",
            "ChB3b3JraW5nRGlyZWN0b3J5GAQgASgJEhEKCWFyZ3VtZW50cxgFIAEoCRIb",
            "ChNhZGRpdGlvbmFsQXJndW1lbnRzGAYgASgJEhYKDnVwbGF5QXJndW1lbnRz",
            "GAcgASgJEmAKFm92ZXJsYXlJbmplY3Rpb25NZXRob2QYCCABKA4yQC5tZy5w",
            "cm90b2NvbC5nYW1lX3N0YXJ0ZXIuU3RhcnRHcmFudGVkUnNwLk92ZXJsYXlJ",
            "bmplY3Rpb25NZXRob2QSMgoHaG90a2V5cxgJIAEoCzIhLm1nLnByb3RvY29s",
            "LmdhbWVfc3RhcnRlci5Ib3RrZXlzIn0KFk92ZXJsYXlJbmplY3Rpb25NZXRo",
            "b2QSHwobT3ZlcmxheUluamVjdGlvbk1ldGhvZF9Ob25lEAESIgoeT3Zlcmxh",
            "eUluamVjdGlvbk1ldGhvZF9EZWZhdWx0EAISHgoaT3ZlcmxheUluamVjdGlv",
            "bk1ldGhvZF9TREsQAyJyCg5TdGFydERlbmllZFJzcBI/CgZyZWFzb24YASAB",
            "KA4yLy5tZy5wcm90b2NvbC5nYW1lX3N0YXJ0ZXIuU3RhcnREZW5pZWRSc3Au",
            "UmVhc29uIh8KBlJlYXNvbhIVChFHYW1lUGF0Y2hSZXF1aXJlZBAAIhMKEVVw",
            "ZGF0ZVJlcXVpcmVkUnNwIhEKD0NvbmZpcm1hdGlvblJzcCKLAQoDUmVxEjQK",
            "CHN0YXJ0UmVxGAEgASgLMiIubWcucHJvdG9jb2wuZ2FtZV9zdGFydGVyLlN0",
            "YXJ0UmVxEk4KFWhvdGtleVN0YXRlQ2hhbmdlZFJlcRgDIAEoCzIvLm1nLnBy",
            "b3RvY29sLmdhbWVfc3RhcnRlci5Ib3RrZXlTdGF0ZUNoYW5nZWRSZXEiDwoN",
            "UmVjb25uZWN0UHVzaCIdChtVc2VySW50ZXJhY3Rpb25SZXF1aXJlZFB1c2gi",
            "NwoUU3RlYW1PdmVybGF5U2hvd1B1c2gSCwoDdXJsGAEgASgJEhIKCnN0ZWFt",
            "QXBwSWQYAiABKA0iRwoRVXBkYXRlSG90S2V5c1B1c2gSMgoHaG90a2V5cxgB",
            "IAIoCzIhLm1nLnByb3RvY29sLmdhbWVfc3RhcnRlci5Ib3RrZXlzIrgCCgRQ",
            "dXNoEj4KDXJlY29ubmVjdFB1c2gYAiABKAsyJy5tZy5wcm90b2NvbC5nYW1l",
            "X3N0YXJ0ZXIuUmVjb25uZWN0UHVzaBJaCht1c2VySW50ZXJhY3Rpb25SZXF1",
            "aXJlZFB1c2gYAyABKAsyNS5tZy5wcm90b2NvbC5nYW1lX3N0YXJ0ZXIuVXNl",
            "ckludGVyYWN0aW9uUmVxdWlyZWRQdXNoEkwKFHN0ZWFtT3ZlcmxheVNob3dQ",
            "dXNoGAQgASgLMi4ubWcucHJvdG9jb2wuZ2FtZV9zdGFydGVyLlN0ZWFtT3Zl",
            "cmxheVNob3dQdXNoEkYKEXVwZGF0ZUhvdEtleXNQdXNoGAUgASgLMisubWcu",
            "cHJvdG9jb2wuZ2FtZV9zdGFydGVyLlVwZGF0ZUhvdEtleXNQdXNoItcBCgNS",
            "c3ASQgoPc3RhcnRHcmFudGVkUnNwGAEgASgLMikubWcucHJvdG9jb2wuZ2Ft",
            "ZV9zdGFydGVyLlN0YXJ0R3JhbnRlZFJzcBJACg5zdGFydERlbmllZFJzcBgC",
            "IAEoCzIoLm1nLnByb3RvY29sLmdhbWVfc3RhcnRlci5TdGFydERlbmllZFJz",
            "cBJKChNkaXNjb3JkUmljaFByZXNlbmNlGAMgASgLMi0ubWcucHJvdG9jb2wu",
            "Z2FtZV9zdGFydGVyLkRpc2NvcmRSaWNoUHJlc2VuY2UiNgoIVXBzdHJlYW0S",
            "KgoDcmVxGAEgASgLMh0ubWcucHJvdG9jb2wuZ2FtZV9zdGFydGVyLlJlcSJm",
            "CgpEb3duc3RyZWFtEiwKBHB1c2gYASABKAsyHi5tZy5wcm90b2NvbC5nYW1l",
            "X3N0YXJ0ZXIuUHVzaBIqCgNyc3AYAiABKAsyHS5tZy5wcm90b2NvbC5nYW1l",
            "X3N0YXJ0ZXIuUnNw"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Uplay.GameStarter.RichPresenceToken), global::Uplay.GameStarter.RichPresenceToken.Parser, new[]{ "Key", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Uplay.GameStarter.DiscordRichPresence), global::Uplay.GameStarter.DiscordRichPresence.Parser, new[]{ "AppId", "LargeImage", "SmallImage", "Text" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Uplay.GameStarter.SteamProofOfPurchase), global::Uplay.GameStarter.SteamProofOfPurchase.Parser, new[]{ "SteamAppId", "Ticket" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Uplay.GameStarter.OculusInfo), global::Uplay.GameStarter.OculusInfo.Parser, new[]{ "AppId", "UserId", "OculusUserId", "AccessToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Uplay.GameStarter.NvidiaInfo), global::Uplay.GameStarter.NvidiaInfo.Parser, new[]{ "AccessToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Uplay.GameStarter.WeGameInfo), global::Uplay.GameStarter.WeGameInfo.Parser, new[]{ "RailGameId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Uplay.GameStarter.StartReq), global::Uplay.GameStarter.StartReq.Parser, new[]{ "LauncherVersion", "UplayId", "SteamGame", "GameVersion", "ProductId", "SimulationConfig", "SteamTicket", "SteamId", "ExecutablePath", "ExecutableArguments", "TimeStart", "SteamFreePackageId", "SteamRequiredProductId", "SteamProofOfPurchase", "OculusInfo", "Platform", "SteamOwnerId", "NvidiaInfo", "WeGameInfo" }, null, new[]{ typeof(global::Uplay.GameStarter.StartReq.Types.Platform) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Uplay.GameStarter.HotkeyStateChangedReq), global::Uplay.GameStarter.HotkeyStateChangedReq.Parser, new[]{ "HotkeyType", "IsPressed" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Uplay.GameStarter.Hotkey), global::Uplay.GameStarter.Hotkey.Parser, new[]{ "HotkeyType", "KeyCode", "AltState", "ShiftState", "ControlState" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Uplay.GameStarter.Hotkeys), global::Uplay.GameStarter.Hotkeys.Parser, new[]{ "Hotkeys_" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Uplay.GameStarter.StartGrantedRsp), global::Uplay.GameStarter.StartGrantedRsp.Parser, new[]{ "OverlayEnabled", "WindowedMode", "ExecutablePath", "WorkingDirectory", "Arguments", "AdditionalArguments", "UplayArguments", "OverlayInjectionMethod", "Hotkeys" }, null, new[]{ typeof(global::Uplay.GameStarter.StartGrantedRsp.Types.OverlayInjectionMethod) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Uplay.GameStarter.StartDeniedRsp), global::Uplay.GameStarter.StartDeniedRsp.Parser, new[]{ "Reason" }, null, new[]{ typeof(global::Uplay.GameStarter.StartDeniedRsp.Types.Reason) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Uplay.GameStarter.UpdateRequiredRsp), global::Uplay.GameStarter.UpdateRequiredRsp.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Uplay.GameStarter.ConfirmationRsp), global::Uplay.GameStarter.ConfirmationRsp.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Uplay.GameStarter.Req), global::Uplay.GameStarter.Req.Parser, new[]{ "StartReq", "HotkeyStateChangedReq" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Uplay.GameStarter.ReconnectPush), global::Uplay.GameStarter.ReconnectPush.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Uplay.GameStarter.UserInteractionRequiredPush), global::Uplay.GameStarter.UserInteractionRequiredPush.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Uplay.GameStarter.SteamOverlayShowPush), global::Uplay.GameStarter.SteamOverlayShowPush.Parser, new[]{ "Url", "SteamAppId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Uplay.GameStarter.UpdateHotKeysPush), global::Uplay.GameStarter.UpdateHotKeysPush.Parser, new[]{ "Hotkeys" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Uplay.GameStarter.Push), global::Uplay.GameStarter.Push.Parser, new[]{ "ReconnectPush", "UserInteractionRequiredPush", "SteamOverlayShowPush", "UpdateHotKeysPush" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Uplay.GameStarter.Rsp), global::Uplay.GameStarter.Rsp.Parser, new[]{ "StartGrantedRsp", "StartDeniedRsp", "DiscordRichPresence" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Uplay.GameStarter.Upstream), global::Uplay.GameStarter.Upstream.Parser, new[]{ "Req" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Uplay.GameStarter.Downstream), global::Uplay.GameStarter.Downstream.Parser, new[]{ "Push", "Rsp" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class RichPresenceToken : pb::IMessage<RichPresenceToken>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RichPresenceToken> _parser = new pb::MessageParser<RichPresenceToken>(() => new RichPresenceToken());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<RichPresenceToken> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Uplay.GameStarter.GameStarterReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RichPresenceToken() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RichPresenceToken(RichPresenceToken other) : this() {
      key_ = other.key_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RichPresenceToken Clone() {
      return new RichPresenceToken(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private readonly static string KeyDefaultValue = "";

    private string key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Key {
      get { return key_ ?? KeyDefaultValue; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "key" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasKey {
      get { return key_ != null; }
    }
    /// <summary>Clears the value of the "key" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearKey() {
      key_ = null;
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private readonly static string ValueDefaultValue = "";

    private string value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Value {
      get { return value_ ?? ValueDefaultValue; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasValue {
      get { return value_ != null; }
    }
    /// <summary>Clears the value of the "value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearValue() {
      value_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as RichPresenceToken);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(RichPresenceToken other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasKey) hash ^= Key.GetHashCode();
      if (HasValue) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasKey) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (HasValue) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasKey) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (HasValue) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasKey) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (HasValue) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(RichPresenceToken other) {
      if (other == null) {
        return;
      }
      if (other.HasKey) {
        Key = other.Key;
      }
      if (other.HasValue) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DiscordRichPresence : pb::IMessage<DiscordRichPresence>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DiscordRichPresence> _parser = new pb::MessageParser<DiscordRichPresence>(() => new DiscordRichPresence());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<DiscordRichPresence> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Uplay.GameStarter.GameStarterReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DiscordRichPresence() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DiscordRichPresence(DiscordRichPresence other) : this() {
      appId_ = other.appId_;
      largeImage_ = other.largeImage_;
      smallImage_ = other.smallImage_;
      text_ = other.text_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DiscordRichPresence Clone() {
      return new DiscordRichPresence(this);
    }

    /// <summary>Field number for the "app_id" field.</summary>
    public const int AppIdFieldNumber = 1;
    private readonly static string AppIdDefaultValue = "";

    private string appId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AppId {
      get { return appId_ ?? AppIdDefaultValue; }
      set {
        appId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "app_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAppId {
      get { return appId_ != null; }
    }
    /// <summary>Clears the value of the "app_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAppId() {
      appId_ = null;
    }

    /// <summary>Field number for the "large_image" field.</summary>
    public const int LargeImageFieldNumber = 2;
    private readonly static string LargeImageDefaultValue = "";

    private string largeImage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LargeImage {
      get { return largeImage_ ?? LargeImageDefaultValue; }
      set {
        largeImage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "large_image" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLargeImage {
      get { return largeImage_ != null; }
    }
    /// <summary>Clears the value of the "large_image" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLargeImage() {
      largeImage_ = null;
    }

    /// <summary>Field number for the "small_image" field.</summary>
    public const int SmallImageFieldNumber = 3;
    private readonly static string SmallImageDefaultValue = "";

    private string smallImage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SmallImage {
      get { return smallImage_ ?? SmallImageDefaultValue; }
      set {
        smallImage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "small_image" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSmallImage {
      get { return smallImage_ != null; }
    }
    /// <summary>Clears the value of the "small_image" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSmallImage() {
      smallImage_ = null;
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 5;
    private readonly static string TextDefaultValue = "";

    private string text_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Text {
      get { return text_ ?? TextDefaultValue; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "text" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasText {
      get { return text_ != null; }
    }
    /// <summary>Clears the value of the "text" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearText() {
      text_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as DiscordRichPresence);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(DiscordRichPresence other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AppId != other.AppId) return false;
      if (LargeImage != other.LargeImage) return false;
      if (SmallImage != other.SmallImage) return false;
      if (Text != other.Text) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAppId) hash ^= AppId.GetHashCode();
      if (HasLargeImage) hash ^= LargeImage.GetHashCode();
      if (HasSmallImage) hash ^= SmallImage.GetHashCode();
      if (HasText) hash ^= Text.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasAppId) {
        output.WriteRawTag(10);
        output.WriteString(AppId);
      }
      if (HasLargeImage) {
        output.WriteRawTag(18);
        output.WriteString(LargeImage);
      }
      if (HasSmallImage) {
        output.WriteRawTag(26);
        output.WriteString(SmallImage);
      }
      if (HasText) {
        output.WriteRawTag(42);
        output.WriteString(Text);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasAppId) {
        output.WriteRawTag(10);
        output.WriteString(AppId);
      }
      if (HasLargeImage) {
        output.WriteRawTag(18);
        output.WriteString(LargeImage);
      }
      if (HasSmallImage) {
        output.WriteRawTag(26);
        output.WriteString(SmallImage);
      }
      if (HasText) {
        output.WriteRawTag(42);
        output.WriteString(Text);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasAppId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AppId);
      }
      if (HasLargeImage) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LargeImage);
      }
      if (HasSmallImage) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SmallImage);
      }
      if (HasText) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(DiscordRichPresence other) {
      if (other == null) {
        return;
      }
      if (other.HasAppId) {
        AppId = other.AppId;
      }
      if (other.HasLargeImage) {
        LargeImage = other.LargeImage;
      }
      if (other.HasSmallImage) {
        SmallImage = other.SmallImage;
      }
      if (other.HasText) {
        Text = other.Text;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AppId = input.ReadString();
            break;
          }
          case 18: {
            LargeImage = input.ReadString();
            break;
          }
          case 26: {
            SmallImage = input.ReadString();
            break;
          }
          case 42: {
            Text = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            AppId = input.ReadString();
            break;
          }
          case 18: {
            LargeImage = input.ReadString();
            break;
          }
          case 26: {
            SmallImage = input.ReadString();
            break;
          }
          case 42: {
            Text = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SteamProofOfPurchase : pb::IMessage<SteamProofOfPurchase>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SteamProofOfPurchase> _parser = new pb::MessageParser<SteamProofOfPurchase>(() => new SteamProofOfPurchase());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SteamProofOfPurchase> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Uplay.GameStarter.GameStarterReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SteamProofOfPurchase() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SteamProofOfPurchase(SteamProofOfPurchase other) : this() {
      _hasBits0 = other._hasBits0;
      steamAppId_ = other.steamAppId_;
      ticket_ = other.ticket_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SteamProofOfPurchase Clone() {
      return new SteamProofOfPurchase(this);
    }

    /// <summary>Field number for the "steamAppId" field.</summary>
    public const int SteamAppIdFieldNumber = 1;
    private readonly static uint SteamAppIdDefaultValue = 0;

    private uint steamAppId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint SteamAppId {
      get { if ((_hasBits0 & 1) != 0) { return steamAppId_; } else { return SteamAppIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        steamAppId_ = value;
      }
    }
    /// <summary>Gets whether the "steamAppId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSteamAppId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "steamAppId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSteamAppId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "ticket" field.</summary>
    public const int TicketFieldNumber = 2;
    private readonly static string TicketDefaultValue = "";

    private string ticket_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Ticket {
      get { return ticket_ ?? TicketDefaultValue; }
      set {
        ticket_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "ticket" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTicket {
      get { return ticket_ != null; }
    }
    /// <summary>Clears the value of the "ticket" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTicket() {
      ticket_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SteamProofOfPurchase);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SteamProofOfPurchase other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SteamAppId != other.SteamAppId) return false;
      if (Ticket != other.Ticket) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSteamAppId) hash ^= SteamAppId.GetHashCode();
      if (HasTicket) hash ^= Ticket.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSteamAppId) {
        output.WriteRawTag(8);
        output.WriteUInt32(SteamAppId);
      }
      if (HasTicket) {
        output.WriteRawTag(18);
        output.WriteString(Ticket);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSteamAppId) {
        output.WriteRawTag(8);
        output.WriteUInt32(SteamAppId);
      }
      if (HasTicket) {
        output.WriteRawTag(18);
        output.WriteString(Ticket);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasSteamAppId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SteamAppId);
      }
      if (HasTicket) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ticket);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SteamProofOfPurchase other) {
      if (other == null) {
        return;
      }
      if (other.HasSteamAppId) {
        SteamAppId = other.SteamAppId;
      }
      if (other.HasTicket) {
        Ticket = other.Ticket;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SteamAppId = input.ReadUInt32();
            break;
          }
          case 18: {
            Ticket = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SteamAppId = input.ReadUInt32();
            break;
          }
          case 18: {
            Ticket = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class OculusInfo : pb::IMessage<OculusInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OculusInfo> _parser = new pb::MessageParser<OculusInfo>(() => new OculusInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<OculusInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Uplay.GameStarter.GameStarterReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OculusInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OculusInfo(OculusInfo other) : this() {
      appId_ = other.appId_;
      userId_ = other.userId_;
      oculusUserId_ = other.oculusUserId_;
      accessToken_ = other.accessToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OculusInfo Clone() {
      return new OculusInfo(this);
    }

    /// <summary>Field number for the "appId" field.</summary>
    public const int AppIdFieldNumber = 1;
    private readonly static string AppIdDefaultValue = "";

    private string appId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AppId {
      get { return appId_ ?? AppIdDefaultValue; }
      set {
        appId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "appId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAppId {
      get { return appId_ != null; }
    }
    /// <summary>Clears the value of the "appId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAppId() {
      appId_ = null;
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 2;
    private readonly static string UserIdDefaultValue = "";

    private string userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string UserId {
      get { return userId_ ?? UserIdDefaultValue; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "userId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUserId {
      get { return userId_ != null; }
    }
    /// <summary>Clears the value of the "userId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUserId() {
      userId_ = null;
    }

    /// <summary>Field number for the "oculusUserId" field.</summary>
    public const int OculusUserIdFieldNumber = 3;
    private readonly static string OculusUserIdDefaultValue = "";

    private string oculusUserId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OculusUserId {
      get { return oculusUserId_ ?? OculusUserIdDefaultValue; }
      set {
        oculusUserId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "oculusUserId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOculusUserId {
      get { return oculusUserId_ != null; }
    }
    /// <summary>Clears the value of the "oculusUserId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOculusUserId() {
      oculusUserId_ = null;
    }

    /// <summary>Field number for the "accessToken" field.</summary>
    public const int AccessTokenFieldNumber = 4;
    private readonly static string AccessTokenDefaultValue = "";

    private string accessToken_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AccessToken {
      get { return accessToken_ ?? AccessTokenDefaultValue; }
      set {
        accessToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "accessToken" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAccessToken {
      get { return accessToken_ != null; }
    }
    /// <summary>Clears the value of the "accessToken" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAccessToken() {
      accessToken_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as OculusInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(OculusInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AppId != other.AppId) return false;
      if (UserId != other.UserId) return false;
      if (OculusUserId != other.OculusUserId) return false;
      if (AccessToken != other.AccessToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAppId) hash ^= AppId.GetHashCode();
      if (HasUserId) hash ^= UserId.GetHashCode();
      if (HasOculusUserId) hash ^= OculusUserId.GetHashCode();
      if (HasAccessToken) hash ^= AccessToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasAppId) {
        output.WriteRawTag(10);
        output.WriteString(AppId);
      }
      if (HasUserId) {
        output.WriteRawTag(18);
        output.WriteString(UserId);
      }
      if (HasOculusUserId) {
        output.WriteRawTag(26);
        output.WriteString(OculusUserId);
      }
      if (HasAccessToken) {
        output.WriteRawTag(34);
        output.WriteString(AccessToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasAppId) {
        output.WriteRawTag(10);
        output.WriteString(AppId);
      }
      if (HasUserId) {
        output.WriteRawTag(18);
        output.WriteString(UserId);
      }
      if (HasOculusUserId) {
        output.WriteRawTag(26);
        output.WriteString(OculusUserId);
      }
      if (HasAccessToken) {
        output.WriteRawTag(34);
        output.WriteString(AccessToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasAppId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AppId);
      }
      if (HasUserId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (HasOculusUserId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OculusUserId);
      }
      if (HasAccessToken) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccessToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(OculusInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasAppId) {
        AppId = other.AppId;
      }
      if (other.HasUserId) {
        UserId = other.UserId;
      }
      if (other.HasOculusUserId) {
        OculusUserId = other.OculusUserId;
      }
      if (other.HasAccessToken) {
        AccessToken = other.AccessToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AppId = input.ReadString();
            break;
          }
          case 18: {
            UserId = input.ReadString();
            break;
          }
          case 26: {
            OculusUserId = input.ReadString();
            break;
          }
          case 34: {
            AccessToken = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            AppId = input.ReadString();
            break;
          }
          case 18: {
            UserId = input.ReadString();
            break;
          }
          case 26: {
            OculusUserId = input.ReadString();
            break;
          }
          case 34: {
            AccessToken = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class NvidiaInfo : pb::IMessage<NvidiaInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NvidiaInfo> _parser = new pb::MessageParser<NvidiaInfo>(() => new NvidiaInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<NvidiaInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Uplay.GameStarter.GameStarterReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NvidiaInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NvidiaInfo(NvidiaInfo other) : this() {
      accessToken_ = other.accessToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NvidiaInfo Clone() {
      return new NvidiaInfo(this);
    }

    /// <summary>Field number for the "accessToken" field.</summary>
    public const int AccessTokenFieldNumber = 1;
    private readonly static string AccessTokenDefaultValue = "";

    private string accessToken_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AccessToken {
      get { return accessToken_ ?? AccessTokenDefaultValue; }
      set {
        accessToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "accessToken" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAccessToken {
      get { return accessToken_ != null; }
    }
    /// <summary>Clears the value of the "accessToken" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAccessToken() {
      accessToken_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as NvidiaInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(NvidiaInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccessToken != other.AccessToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAccessToken) hash ^= AccessToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasAccessToken) {
        output.WriteRawTag(10);
        output.WriteString(AccessToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasAccessToken) {
        output.WriteRawTag(10);
        output.WriteString(AccessToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasAccessToken) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccessToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(NvidiaInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasAccessToken) {
        AccessToken = other.AccessToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AccessToken = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            AccessToken = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class WeGameInfo : pb::IMessage<WeGameInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<WeGameInfo> _parser = new pb::MessageParser<WeGameInfo>(() => new WeGameInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<WeGameInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Uplay.GameStarter.GameStarterReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WeGameInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WeGameInfo(WeGameInfo other) : this() {
      _hasBits0 = other._hasBits0;
      railGameId_ = other.railGameId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WeGameInfo Clone() {
      return new WeGameInfo(this);
    }

    /// <summary>Field number for the "rail_game_id" field.</summary>
    public const int RailGameIdFieldNumber = 1;
    private readonly static ulong RailGameIdDefaultValue = 0UL;

    private ulong railGameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong RailGameId {
      get { if ((_hasBits0 & 1) != 0) { return railGameId_; } else { return RailGameIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        railGameId_ = value;
      }
    }
    /// <summary>Gets whether the "rail_game_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRailGameId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "rail_game_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRailGameId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as WeGameInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(WeGameInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RailGameId != other.RailGameId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRailGameId) hash ^= RailGameId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasRailGameId) {
        output.WriteRawTag(8);
        output.WriteUInt64(RailGameId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasRailGameId) {
        output.WriteRawTag(8);
        output.WriteUInt64(RailGameId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasRailGameId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RailGameId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(WeGameInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasRailGameId) {
        RailGameId = other.RailGameId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RailGameId = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RailGameId = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class StartReq : pb::IMessage<StartReq>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StartReq> _parser = new pb::MessageParser<StartReq>(() => new StartReq());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<StartReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Uplay.GameStarter.GameStarterReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StartReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StartReq(StartReq other) : this() {
      _hasBits0 = other._hasBits0;
      launcherVersion_ = other.launcherVersion_;
      uplayId_ = other.uplayId_;
      steamGame_ = other.steamGame_;
      gameVersion_ = other.gameVersion_;
      productId_ = other.productId_;
      simulationConfig_ = other.simulationConfig_;
      steamTicket_ = other.steamTicket_;
      steamId_ = other.steamId_;
      executablePath_ = other.executablePath_;
      executableArguments_ = other.executableArguments_;
      timeStart_ = other.timeStart_;
      steamFreePackageId_ = other.steamFreePackageId_;
      steamRequiredProductId_ = other.steamRequiredProductId_;
      steamProofOfPurchase_ = other.steamProofOfPurchase_.Clone();
      oculusInfo_ = other.oculusInfo_ != null ? other.oculusInfo_.Clone() : null;
      platform_ = other.platform_;
      steamOwnerId_ = other.steamOwnerId_;
      nvidiaInfo_ = other.nvidiaInfo_ != null ? other.nvidiaInfo_.Clone() : null;
      weGameInfo_ = other.weGameInfo_ != null ? other.weGameInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StartReq Clone() {
      return new StartReq(this);
    }

    /// <summary>Field number for the "launcherVersion" field.</summary>
    public const int LauncherVersionFieldNumber = 1;
    private readonly static uint LauncherVersionDefaultValue = 0;

    private uint launcherVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint LauncherVersion {
      get { if ((_hasBits0 & 1) != 0) { return launcherVersion_; } else { return LauncherVersionDefaultValue; } }
      set {
        _hasBits0 |= 1;
        launcherVersion_ = value;
      }
    }
    /// <summary>Gets whether the "launcherVersion" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLauncherVersion {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "launcherVersion" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLauncherVersion() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "uplayId" field.</summary>
    public const int UplayIdFieldNumber = 2;
    private readonly static uint UplayIdDefaultValue = 0;

    private uint uplayId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint UplayId {
      get { if ((_hasBits0 & 2) != 0) { return uplayId_; } else { return UplayIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        uplayId_ = value;
      }
    }
    /// <summary>Gets whether the "uplayId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUplayId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "uplayId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUplayId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "steamGame" field.</summary>
    public const int SteamGameFieldNumber = 3;
    private readonly static bool SteamGameDefaultValue = false;

    private bool steamGame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SteamGame {
      get { if ((_hasBits0 & 4) != 0) { return steamGame_; } else { return SteamGameDefaultValue; } }
      set {
        _hasBits0 |= 4;
        steamGame_ = value;
      }
    }
    /// <summary>Gets whether the "steamGame" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSteamGame {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "steamGame" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSteamGame() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "gameVersion" field.</summary>
    public const int GameVersionFieldNumber = 4;
    private readonly static uint GameVersionDefaultValue = 0;

    private uint gameVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint GameVersion {
      get { if ((_hasBits0 & 8) != 0) { return gameVersion_; } else { return GameVersionDefaultValue; } }
      set {
        _hasBits0 |= 8;
        gameVersion_ = value;
      }
    }
    /// <summary>Gets whether the "gameVersion" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGameVersion {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "gameVersion" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGameVersion() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "productId" field.</summary>
    public const int ProductIdFieldNumber = 5;
    private readonly static uint ProductIdDefaultValue = 0;

    private uint productId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ProductId {
      get { if ((_hasBits0 & 16) != 0) { return productId_; } else { return ProductIdDefaultValue; } }
      set {
        _hasBits0 |= 16;
        productId_ = value;
      }
    }
    /// <summary>Gets whether the "productId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasProductId {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "productId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearProductId() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "simulationConfig" field.</summary>
    public const int SimulationConfigFieldNumber = 7;
    private readonly static string SimulationConfigDefaultValue = "";

    private string simulationConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SimulationConfig {
      get { return simulationConfig_ ?? SimulationConfigDefaultValue; }
      set {
        simulationConfig_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "simulationConfig" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSimulationConfig {
      get { return simulationConfig_ != null; }
    }
    /// <summary>Clears the value of the "simulationConfig" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSimulationConfig() {
      simulationConfig_ = null;
    }

    /// <summary>Field number for the "steamTicket" field.</summary>
    public const int SteamTicketFieldNumber = 8;
    private readonly static string SteamTicketDefaultValue = "";

    private string steamTicket_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SteamTicket {
      get { return steamTicket_ ?? SteamTicketDefaultValue; }
      set {
        steamTicket_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "steamTicket" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSteamTicket {
      get { return steamTicket_ != null; }
    }
    /// <summary>Clears the value of the "steamTicket" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSteamTicket() {
      steamTicket_ = null;
    }

    /// <summary>Field number for the "steamId" field.</summary>
    public const int SteamIdFieldNumber = 9;
    private readonly static string SteamIdDefaultValue = "";

    private string steamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SteamId {
      get { return steamId_ ?? SteamIdDefaultValue; }
      set {
        steamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "steamId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSteamId {
      get { return steamId_ != null; }
    }
    /// <summary>Clears the value of the "steamId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSteamId() {
      steamId_ = null;
    }

    /// <summary>Field number for the "executablePath" field.</summary>
    public const int ExecutablePathFieldNumber = 10;
    private readonly static string ExecutablePathDefaultValue = "";

    private string executablePath_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExecutablePath {
      get { return executablePath_ ?? ExecutablePathDefaultValue; }
      set {
        executablePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "executablePath" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasExecutablePath {
      get { return executablePath_ != null; }
    }
    /// <summary>Clears the value of the "executablePath" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearExecutablePath() {
      executablePath_ = null;
    }

    /// <summary>Field number for the "executableArguments" field.</summary>
    public const int ExecutableArgumentsFieldNumber = 11;
    private readonly static string ExecutableArgumentsDefaultValue = "";

    private string executableArguments_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExecutableArguments {
      get { return executableArguments_ ?? ExecutableArgumentsDefaultValue; }
      set {
        executableArguments_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "executableArguments" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasExecutableArguments {
      get { return executableArguments_ != null; }
    }
    /// <summary>Clears the value of the "executableArguments" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearExecutableArguments() {
      executableArguments_ = null;
    }

    /// <summary>Field number for the "timeStart" field.</summary>
    public const int TimeStartFieldNumber = 12;
    private readonly static ulong TimeStartDefaultValue = 0UL;

    private ulong timeStart_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong TimeStart {
      get { if ((_hasBits0 & 32) != 0) { return timeStart_; } else { return TimeStartDefaultValue; } }
      set {
        _hasBits0 |= 32;
        timeStart_ = value;
      }
    }
    /// <summary>Gets whether the "timeStart" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTimeStart {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "timeStart" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTimeStart() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "steamFreePackageId" field.</summary>
    public const int SteamFreePackageIdFieldNumber = 13;
    private readonly static uint SteamFreePackageIdDefaultValue = 0;

    private uint steamFreePackageId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint SteamFreePackageId {
      get { if ((_hasBits0 & 64) != 0) { return steamFreePackageId_; } else { return SteamFreePackageIdDefaultValue; } }
      set {
        _hasBits0 |= 64;
        steamFreePackageId_ = value;
      }
    }
    /// <summary>Gets whether the "steamFreePackageId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSteamFreePackageId {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "steamFreePackageId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSteamFreePackageId() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "steamRequiredProductId" field.</summary>
    public const int SteamRequiredProductIdFieldNumber = 14;
    private readonly static uint SteamRequiredProductIdDefaultValue = 0;

    private uint steamRequiredProductId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint SteamRequiredProductId {
      get { if ((_hasBits0 & 128) != 0) { return steamRequiredProductId_; } else { return SteamRequiredProductIdDefaultValue; } }
      set {
        _hasBits0 |= 128;
        steamRequiredProductId_ = value;
      }
    }
    /// <summary>Gets whether the "steamRequiredProductId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSteamRequiredProductId {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "steamRequiredProductId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSteamRequiredProductId() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "steamProofOfPurchase" field.</summary>
    public const int SteamProofOfPurchaseFieldNumber = 15;
    private static readonly pb::FieldCodec<global::Uplay.GameStarter.SteamProofOfPurchase> _repeated_steamProofOfPurchase_codec
        = pb::FieldCodec.ForMessage(122, global::Uplay.GameStarter.SteamProofOfPurchase.Parser);
    private readonly pbc::RepeatedField<global::Uplay.GameStarter.SteamProofOfPurchase> steamProofOfPurchase_ = new pbc::RepeatedField<global::Uplay.GameStarter.SteamProofOfPurchase>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Uplay.GameStarter.SteamProofOfPurchase> SteamProofOfPurchase {
      get { return steamProofOfPurchase_; }
    }

    /// <summary>Field number for the "oculusInfo" field.</summary>
    public const int OculusInfoFieldNumber = 16;
    private global::Uplay.GameStarter.OculusInfo oculusInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Uplay.GameStarter.OculusInfo OculusInfo {
      get { return oculusInfo_; }
      set {
        oculusInfo_ = value;
      }
    }

    /// <summary>Field number for the "platform" field.</summary>
    public const int PlatformFieldNumber = 17;
    private readonly static global::Uplay.GameStarter.StartReq.Types.Platform PlatformDefaultValue = global::Uplay.GameStarter.StartReq.Types.Platform.Uplay;

    private global::Uplay.GameStarter.StartReq.Types.Platform platform_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Uplay.GameStarter.StartReq.Types.Platform Platform {
      get { if ((_hasBits0 & 256) != 0) { return platform_; } else { return PlatformDefaultValue; } }
      set {
        _hasBits0 |= 256;
        platform_ = value;
      }
    }
    /// <summary>Gets whether the "platform" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPlatform {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "platform" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPlatform() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "steamOwnerId" field.</summary>
    public const int SteamOwnerIdFieldNumber = 18;
    private readonly static string SteamOwnerIdDefaultValue = "";

    private string steamOwnerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SteamOwnerId {
      get { return steamOwnerId_ ?? SteamOwnerIdDefaultValue; }
      set {
        steamOwnerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "steamOwnerId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSteamOwnerId {
      get { return steamOwnerId_ != null; }
    }
    /// <summary>Clears the value of the "steamOwnerId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSteamOwnerId() {
      steamOwnerId_ = null;
    }

    /// <summary>Field number for the "nvidiaInfo" field.</summary>
    public const int NvidiaInfoFieldNumber = 19;
    private global::Uplay.GameStarter.NvidiaInfo nvidiaInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Uplay.GameStarter.NvidiaInfo NvidiaInfo {
      get { return nvidiaInfo_; }
      set {
        nvidiaInfo_ = value;
      }
    }

    /// <summary>Field number for the "weGameInfo" field.</summary>
    public const int WeGameInfoFieldNumber = 20;
    private global::Uplay.GameStarter.WeGameInfo weGameInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Uplay.GameStarter.WeGameInfo WeGameInfo {
      get { return weGameInfo_; }
      set {
        weGameInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as StartReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(StartReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LauncherVersion != other.LauncherVersion) return false;
      if (UplayId != other.UplayId) return false;
      if (SteamGame != other.SteamGame) return false;
      if (GameVersion != other.GameVersion) return false;
      if (ProductId != other.ProductId) return false;
      if (SimulationConfig != other.SimulationConfig) return false;
      if (SteamTicket != other.SteamTicket) return false;
      if (SteamId != other.SteamId) return false;
      if (ExecutablePath != other.ExecutablePath) return false;
      if (ExecutableArguments != other.ExecutableArguments) return false;
      if (TimeStart != other.TimeStart) return false;
      if (SteamFreePackageId != other.SteamFreePackageId) return false;
      if (SteamRequiredProductId != other.SteamRequiredProductId) return false;
      if(!steamProofOfPurchase_.Equals(other.steamProofOfPurchase_)) return false;
      if (!object.Equals(OculusInfo, other.OculusInfo)) return false;
      if (Platform != other.Platform) return false;
      if (SteamOwnerId != other.SteamOwnerId) return false;
      if (!object.Equals(NvidiaInfo, other.NvidiaInfo)) return false;
      if (!object.Equals(WeGameInfo, other.WeGameInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLauncherVersion) hash ^= LauncherVersion.GetHashCode();
      if (HasUplayId) hash ^= UplayId.GetHashCode();
      if (HasSteamGame) hash ^= SteamGame.GetHashCode();
      if (HasGameVersion) hash ^= GameVersion.GetHashCode();
      if (HasProductId) hash ^= ProductId.GetHashCode();
      if (HasSimulationConfig) hash ^= SimulationConfig.GetHashCode();
      if (HasSteamTicket) hash ^= SteamTicket.GetHashCode();
      if (HasSteamId) hash ^= SteamId.GetHashCode();
      if (HasExecutablePath) hash ^= ExecutablePath.GetHashCode();
      if (HasExecutableArguments) hash ^= ExecutableArguments.GetHashCode();
      if (HasTimeStart) hash ^= TimeStart.GetHashCode();
      if (HasSteamFreePackageId) hash ^= SteamFreePackageId.GetHashCode();
      if (HasSteamRequiredProductId) hash ^= SteamRequiredProductId.GetHashCode();
      hash ^= steamProofOfPurchase_.GetHashCode();
      if (oculusInfo_ != null) hash ^= OculusInfo.GetHashCode();
      if (HasPlatform) hash ^= Platform.GetHashCode();
      if (HasSteamOwnerId) hash ^= SteamOwnerId.GetHashCode();
      if (nvidiaInfo_ != null) hash ^= NvidiaInfo.GetHashCode();
      if (weGameInfo_ != null) hash ^= WeGameInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasLauncherVersion) {
        output.WriteRawTag(8);
        output.WriteUInt32(LauncherVersion);
      }
      if (HasUplayId) {
        output.WriteRawTag(16);
        output.WriteUInt32(UplayId);
      }
      if (HasSteamGame) {
        output.WriteRawTag(24);
        output.WriteBool(SteamGame);
      }
      if (HasGameVersion) {
        output.WriteRawTag(32);
        output.WriteUInt32(GameVersion);
      }
      if (HasProductId) {
        output.WriteRawTag(40);
        output.WriteUInt32(ProductId);
      }
      if (HasSimulationConfig) {
        output.WriteRawTag(58);
        output.WriteString(SimulationConfig);
      }
      if (HasSteamTicket) {
        output.WriteRawTag(66);
        output.WriteString(SteamTicket);
      }
      if (HasSteamId) {
        output.WriteRawTag(74);
        output.WriteString(SteamId);
      }
      if (HasExecutablePath) {
        output.WriteRawTag(82);
        output.WriteString(ExecutablePath);
      }
      if (HasExecutableArguments) {
        output.WriteRawTag(90);
        output.WriteString(ExecutableArguments);
      }
      if (HasTimeStart) {
        output.WriteRawTag(96);
        output.WriteUInt64(TimeStart);
      }
      if (HasSteamFreePackageId) {
        output.WriteRawTag(104);
        output.WriteUInt32(SteamFreePackageId);
      }
      if (HasSteamRequiredProductId) {
        output.WriteRawTag(112);
        output.WriteUInt32(SteamRequiredProductId);
      }
      steamProofOfPurchase_.WriteTo(output, _repeated_steamProofOfPurchase_codec);
      if (oculusInfo_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(OculusInfo);
      }
      if (HasPlatform) {
        output.WriteRawTag(136, 1);
        output.WriteEnum((int) Platform);
      }
      if (HasSteamOwnerId) {
        output.WriteRawTag(146, 1);
        output.WriteString(SteamOwnerId);
      }
      if (nvidiaInfo_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(NvidiaInfo);
      }
      if (weGameInfo_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(WeGameInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasLauncherVersion) {
        output.WriteRawTag(8);
        output.WriteUInt32(LauncherVersion);
      }
      if (HasUplayId) {
        output.WriteRawTag(16);
        output.WriteUInt32(UplayId);
      }
      if (HasSteamGame) {
        output.WriteRawTag(24);
        output.WriteBool(SteamGame);
      }
      if (HasGameVersion) {
        output.WriteRawTag(32);
        output.WriteUInt32(GameVersion);
      }
      if (HasProductId) {
        output.WriteRawTag(40);
        output.WriteUInt32(ProductId);
      }
      if (HasSimulationConfig) {
        output.WriteRawTag(58);
        output.WriteString(SimulationConfig);
      }
      if (HasSteamTicket) {
        output.WriteRawTag(66);
        output.WriteString(SteamTicket);
      }
      if (HasSteamId) {
        output.WriteRawTag(74);
        output.WriteString(SteamId);
      }
      if (HasExecutablePath) {
        output.WriteRawTag(82);
        output.WriteString(ExecutablePath);
      }
      if (HasExecutableArguments) {
        output.WriteRawTag(90);
        output.WriteString(ExecutableArguments);
      }
      if (HasTimeStart) {
        output.WriteRawTag(96);
        output.WriteUInt64(TimeStart);
      }
      if (HasSteamFreePackageId) {
        output.WriteRawTag(104);
        output.WriteUInt32(SteamFreePackageId);
      }
      if (HasSteamRequiredProductId) {
        output.WriteRawTag(112);
        output.WriteUInt32(SteamRequiredProductId);
      }
      steamProofOfPurchase_.WriteTo(ref output, _repeated_steamProofOfPurchase_codec);
      if (oculusInfo_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(OculusInfo);
      }
      if (HasPlatform) {
        output.WriteRawTag(136, 1);
        output.WriteEnum((int) Platform);
      }
      if (HasSteamOwnerId) {
        output.WriteRawTag(146, 1);
        output.WriteString(SteamOwnerId);
      }
      if (nvidiaInfo_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(NvidiaInfo);
      }
      if (weGameInfo_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(WeGameInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasLauncherVersion) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LauncherVersion);
      }
      if (HasUplayId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UplayId);
      }
      if (HasSteamGame) {
        size += 1 + 1;
      }
      if (HasGameVersion) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameVersion);
      }
      if (HasProductId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ProductId);
      }
      if (HasSimulationConfig) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SimulationConfig);
      }
      if (HasSteamTicket) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SteamTicket);
      }
      if (HasSteamId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SteamId);
      }
      if (HasExecutablePath) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExecutablePath);
      }
      if (HasExecutableArguments) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExecutableArguments);
      }
      if (HasTimeStart) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TimeStart);
      }
      if (HasSteamFreePackageId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SteamFreePackageId);
      }
      if (HasSteamRequiredProductId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SteamRequiredProductId);
      }
      size += steamProofOfPurchase_.CalculateSize(_repeated_steamProofOfPurchase_codec);
      if (oculusInfo_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OculusInfo);
      }
      if (HasPlatform) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Platform);
      }
      if (HasSteamOwnerId) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SteamOwnerId);
      }
      if (nvidiaInfo_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(NvidiaInfo);
      }
      if (weGameInfo_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(WeGameInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(StartReq other) {
      if (other == null) {
        return;
      }
      if (other.HasLauncherVersion) {
        LauncherVersion = other.LauncherVersion;
      }
      if (other.HasUplayId) {
        UplayId = other.UplayId;
      }
      if (other.HasSteamGame) {
        SteamGame = other.SteamGame;
      }
      if (other.HasGameVersion) {
        GameVersion = other.GameVersion;
      }
      if (other.HasProductId) {
        ProductId = other.ProductId;
      }
      if (other.HasSimulationConfig) {
        SimulationConfig = other.SimulationConfig;
      }
      if (other.HasSteamTicket) {
        SteamTicket = other.SteamTicket;
      }
      if (other.HasSteamId) {
        SteamId = other.SteamId;
      }
      if (other.HasExecutablePath) {
        ExecutablePath = other.ExecutablePath;
      }
      if (other.HasExecutableArguments) {
        ExecutableArguments = other.ExecutableArguments;
      }
      if (other.HasTimeStart) {
        TimeStart = other.TimeStart;
      }
      if (other.HasSteamFreePackageId) {
        SteamFreePackageId = other.SteamFreePackageId;
      }
      if (other.HasSteamRequiredProductId) {
        SteamRequiredProductId = other.SteamRequiredProductId;
      }
      steamProofOfPurchase_.Add(other.steamProofOfPurchase_);
      if (other.oculusInfo_ != null) {
        if (oculusInfo_ == null) {
          OculusInfo = new global::Uplay.GameStarter.OculusInfo();
        }
        OculusInfo.MergeFrom(other.OculusInfo);
      }
      if (other.HasPlatform) {
        Platform = other.Platform;
      }
      if (other.HasSteamOwnerId) {
        SteamOwnerId = other.SteamOwnerId;
      }
      if (other.nvidiaInfo_ != null) {
        if (nvidiaInfo_ == null) {
          NvidiaInfo = new global::Uplay.GameStarter.NvidiaInfo();
        }
        NvidiaInfo.MergeFrom(other.NvidiaInfo);
      }
      if (other.weGameInfo_ != null) {
        if (weGameInfo_ == null) {
          WeGameInfo = new global::Uplay.GameStarter.WeGameInfo();
        }
        WeGameInfo.MergeFrom(other.WeGameInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LauncherVersion = input.ReadUInt32();
            break;
          }
          case 16: {
            UplayId = input.ReadUInt32();
            break;
          }
          case 24: {
            SteamGame = input.ReadBool();
            break;
          }
          case 32: {
            GameVersion = input.ReadUInt32();
            break;
          }
          case 40: {
            ProductId = input.ReadUInt32();
            break;
          }
          case 58: {
            SimulationConfig = input.ReadString();
            break;
          }
          case 66: {
            SteamTicket = input.ReadString();
            break;
          }
          case 74: {
            SteamId = input.ReadString();
            break;
          }
          case 82: {
            ExecutablePath = input.ReadString();
            break;
          }
          case 90: {
            ExecutableArguments = input.ReadString();
            break;
          }
          case 96: {
            TimeStart = input.ReadUInt64();
            break;
          }
          case 104: {
            SteamFreePackageId = input.ReadUInt32();
            break;
          }
          case 112: {
            SteamRequiredProductId = input.ReadUInt32();
            break;
          }
          case 122: {
            steamProofOfPurchase_.AddEntriesFrom(input, _repeated_steamProofOfPurchase_codec);
            break;
          }
          case 130: {
            if (oculusInfo_ == null) {
              OculusInfo = new global::Uplay.GameStarter.OculusInfo();
            }
            input.ReadMessage(OculusInfo);
            break;
          }
          case 136: {
            Platform = (global::Uplay.GameStarter.StartReq.Types.Platform) input.ReadEnum();
            break;
          }
          case 146: {
            SteamOwnerId = input.ReadString();
            break;
          }
          case 154: {
            if (nvidiaInfo_ == null) {
              NvidiaInfo = new global::Uplay.GameStarter.NvidiaInfo();
            }
            input.ReadMessage(NvidiaInfo);
            break;
          }
          case 162: {
            if (weGameInfo_ == null) {
              WeGameInfo = new global::Uplay.GameStarter.WeGameInfo();
            }
            input.ReadMessage(WeGameInfo);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            LauncherVersion = input.ReadUInt32();
            break;
          }
          case 16: {
            UplayId = input.ReadUInt32();
            break;
          }
          case 24: {
            SteamGame = input.ReadBool();
            break;
          }
          case 32: {
            GameVersion = input.ReadUInt32();
            break;
          }
          case 40: {
            ProductId = input.ReadUInt32();
            break;
          }
          case 58: {
            SimulationConfig = input.ReadString();
            break;
          }
          case 66: {
            SteamTicket = input.ReadString();
            break;
          }
          case 74: {
            SteamId = input.ReadString();
            break;
          }
          case 82: {
            ExecutablePath = input.ReadString();
            break;
          }
          case 90: {
            ExecutableArguments = input.ReadString();
            break;
          }
          case 96: {
            TimeStart = input.ReadUInt64();
            break;
          }
          case 104: {
            SteamFreePackageId = input.ReadUInt32();
            break;
          }
          case 112: {
            SteamRequiredProductId = input.ReadUInt32();
            break;
          }
          case 122: {
            steamProofOfPurchase_.AddEntriesFrom(ref input, _repeated_steamProofOfPurchase_codec);
            break;
          }
          case 130: {
            if (oculusInfo_ == null) {
              OculusInfo = new global::Uplay.GameStarter.OculusInfo();
            }
            input.ReadMessage(OculusInfo);
            break;
          }
          case 136: {
            Platform = (global::Uplay.GameStarter.StartReq.Types.Platform) input.ReadEnum();
            break;
          }
          case 146: {
            SteamOwnerId = input.ReadString();
            break;
          }
          case 154: {
            if (nvidiaInfo_ == null) {
              NvidiaInfo = new global::Uplay.GameStarter.NvidiaInfo();
            }
            input.ReadMessage(NvidiaInfo);
            break;
          }
          case 162: {
            if (weGameInfo_ == null) {
              WeGameInfo = new global::Uplay.GameStarter.WeGameInfo();
            }
            input.ReadMessage(WeGameInfo);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the StartReq message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public enum Platform {
        [pbr::OriginalName("Platform_Uplay")] Uplay = 1,
        [pbr::OriginalName("Platform_Steam")] Steam = 2,
        [pbr::OriginalName("Platform_Oculus")] Oculus = 3,
        [pbr::OriginalName("Platform_Nvidia")] Nvidia = 4,
        [pbr::OriginalName("Platform_Switch")] Switch = 5,
        [pbr::OriginalName("Platform_WeGame")] WeGame = 6,
      }

    }
    #endregion

  }

  public sealed partial class HotkeyStateChangedReq : pb::IMessage<HotkeyStateChangedReq>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<HotkeyStateChangedReq> _parser = new pb::MessageParser<HotkeyStateChangedReq>(() => new HotkeyStateChangedReq());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<HotkeyStateChangedReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Uplay.GameStarter.GameStarterReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HotkeyStateChangedReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HotkeyStateChangedReq(HotkeyStateChangedReq other) : this() {
      _hasBits0 = other._hasBits0;
      hotkeyType_ = other.hotkeyType_;
      isPressed_ = other.isPressed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HotkeyStateChangedReq Clone() {
      return new HotkeyStateChangedReq(this);
    }

    /// <summary>Field number for the "hotkeyType" field.</summary>
    public const int HotkeyTypeFieldNumber = 1;
    private readonly static int HotkeyTypeDefaultValue = 0;

    private int hotkeyType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HotkeyType {
      get { if ((_hasBits0 & 1) != 0) { return hotkeyType_; } else { return HotkeyTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        hotkeyType_ = value;
      }
    }
    /// <summary>Gets whether the "hotkeyType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHotkeyType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "hotkeyType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHotkeyType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "isPressed" field.</summary>
    public const int IsPressedFieldNumber = 2;
    private readonly static bool IsPressedDefaultValue = false;

    private bool isPressed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsPressed {
      get { if ((_hasBits0 & 2) != 0) { return isPressed_; } else { return IsPressedDefaultValue; } }
      set {
        _hasBits0 |= 2;
        isPressed_ = value;
      }
    }
    /// <summary>Gets whether the "isPressed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsPressed {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "isPressed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsPressed() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as HotkeyStateChangedReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(HotkeyStateChangedReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HotkeyType != other.HotkeyType) return false;
      if (IsPressed != other.IsPressed) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasHotkeyType) hash ^= HotkeyType.GetHashCode();
      if (HasIsPressed) hash ^= IsPressed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasHotkeyType) {
        output.WriteRawTag(8);
        output.WriteInt32(HotkeyType);
      }
      if (HasIsPressed) {
        output.WriteRawTag(16);
        output.WriteBool(IsPressed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasHotkeyType) {
        output.WriteRawTag(8);
        output.WriteInt32(HotkeyType);
      }
      if (HasIsPressed) {
        output.WriteRawTag(16);
        output.WriteBool(IsPressed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasHotkeyType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HotkeyType);
      }
      if (HasIsPressed) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(HotkeyStateChangedReq other) {
      if (other == null) {
        return;
      }
      if (other.HasHotkeyType) {
        HotkeyType = other.HotkeyType;
      }
      if (other.HasIsPressed) {
        IsPressed = other.IsPressed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HotkeyType = input.ReadInt32();
            break;
          }
          case 16: {
            IsPressed = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            HotkeyType = input.ReadInt32();
            break;
          }
          case 16: {
            IsPressed = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Hotkey : pb::IMessage<Hotkey>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Hotkey> _parser = new pb::MessageParser<Hotkey>(() => new Hotkey());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Hotkey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Uplay.GameStarter.GameStarterReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Hotkey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Hotkey(Hotkey other) : this() {
      _hasBits0 = other._hasBits0;
      hotkeyType_ = other.hotkeyType_;
      keyCode_ = other.keyCode_;
      altState_ = other.altState_;
      shiftState_ = other.shiftState_;
      controlState_ = other.controlState_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Hotkey Clone() {
      return new Hotkey(this);
    }

    /// <summary>Field number for the "hotkeyType" field.</summary>
    public const int HotkeyTypeFieldNumber = 1;
    private readonly static int HotkeyTypeDefaultValue = 0;

    private int hotkeyType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HotkeyType {
      get { if ((_hasBits0 & 1) != 0) { return hotkeyType_; } else { return HotkeyTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        hotkeyType_ = value;
      }
    }
    /// <summary>Gets whether the "hotkeyType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHotkeyType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "hotkeyType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHotkeyType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "keyCode" field.</summary>
    public const int KeyCodeFieldNumber = 2;
    private readonly static uint KeyCodeDefaultValue = 0;

    private uint keyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint KeyCode {
      get { if ((_hasBits0 & 2) != 0) { return keyCode_; } else { return KeyCodeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        keyCode_ = value;
      }
    }
    /// <summary>Gets whether the "keyCode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasKeyCode {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "keyCode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearKeyCode() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "altState" field.</summary>
    public const int AltStateFieldNumber = 3;
    private readonly static bool AltStateDefaultValue = false;

    private bool altState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool AltState {
      get { if ((_hasBits0 & 4) != 0) { return altState_; } else { return AltStateDefaultValue; } }
      set {
        _hasBits0 |= 4;
        altState_ = value;
      }
    }
    /// <summary>Gets whether the "altState" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAltState {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "altState" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAltState() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "shiftState" field.</summary>
    public const int ShiftStateFieldNumber = 4;
    private readonly static bool ShiftStateDefaultValue = false;

    private bool shiftState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ShiftState {
      get { if ((_hasBits0 & 8) != 0) { return shiftState_; } else { return ShiftStateDefaultValue; } }
      set {
        _hasBits0 |= 8;
        shiftState_ = value;
      }
    }
    /// <summary>Gets whether the "shiftState" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasShiftState {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "shiftState" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearShiftState() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "controlState" field.</summary>
    public const int ControlStateFieldNumber = 5;
    private readonly static bool ControlStateDefaultValue = false;

    private bool controlState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ControlState {
      get { if ((_hasBits0 & 16) != 0) { return controlState_; } else { return ControlStateDefaultValue; } }
      set {
        _hasBits0 |= 16;
        controlState_ = value;
      }
    }
    /// <summary>Gets whether the "controlState" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasControlState {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "controlState" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearControlState() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Hotkey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Hotkey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HotkeyType != other.HotkeyType) return false;
      if (KeyCode != other.KeyCode) return false;
      if (AltState != other.AltState) return false;
      if (ShiftState != other.ShiftState) return false;
      if (ControlState != other.ControlState) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasHotkeyType) hash ^= HotkeyType.GetHashCode();
      if (HasKeyCode) hash ^= KeyCode.GetHashCode();
      if (HasAltState) hash ^= AltState.GetHashCode();
      if (HasShiftState) hash ^= ShiftState.GetHashCode();
      if (HasControlState) hash ^= ControlState.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasHotkeyType) {
        output.WriteRawTag(8);
        output.WriteInt32(HotkeyType);
      }
      if (HasKeyCode) {
        output.WriteRawTag(16);
        output.WriteUInt32(KeyCode);
      }
      if (HasAltState) {
        output.WriteRawTag(24);
        output.WriteBool(AltState);
      }
      if (HasShiftState) {
        output.WriteRawTag(32);
        output.WriteBool(ShiftState);
      }
      if (HasControlState) {
        output.WriteRawTag(40);
        output.WriteBool(ControlState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasHotkeyType) {
        output.WriteRawTag(8);
        output.WriteInt32(HotkeyType);
      }
      if (HasKeyCode) {
        output.WriteRawTag(16);
        output.WriteUInt32(KeyCode);
      }
      if (HasAltState) {
        output.WriteRawTag(24);
        output.WriteBool(AltState);
      }
      if (HasShiftState) {
        output.WriteRawTag(32);
        output.WriteBool(ShiftState);
      }
      if (HasControlState) {
        output.WriteRawTag(40);
        output.WriteBool(ControlState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasHotkeyType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HotkeyType);
      }
      if (HasKeyCode) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(KeyCode);
      }
      if (HasAltState) {
        size += 1 + 1;
      }
      if (HasShiftState) {
        size += 1 + 1;
      }
      if (HasControlState) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Hotkey other) {
      if (other == null) {
        return;
      }
      if (other.HasHotkeyType) {
        HotkeyType = other.HotkeyType;
      }
      if (other.HasKeyCode) {
        KeyCode = other.KeyCode;
      }
      if (other.HasAltState) {
        AltState = other.AltState;
      }
      if (other.HasShiftState) {
        ShiftState = other.ShiftState;
      }
      if (other.HasControlState) {
        ControlState = other.ControlState;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HotkeyType = input.ReadInt32();
            break;
          }
          case 16: {
            KeyCode = input.ReadUInt32();
            break;
          }
          case 24: {
            AltState = input.ReadBool();
            break;
          }
          case 32: {
            ShiftState = input.ReadBool();
            break;
          }
          case 40: {
            ControlState = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            HotkeyType = input.ReadInt32();
            break;
          }
          case 16: {
            KeyCode = input.ReadUInt32();
            break;
          }
          case 24: {
            AltState = input.ReadBool();
            break;
          }
          case 32: {
            ShiftState = input.ReadBool();
            break;
          }
          case 40: {
            ControlState = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Hotkeys : pb::IMessage<Hotkeys>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Hotkeys> _parser = new pb::MessageParser<Hotkeys>(() => new Hotkeys());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Hotkeys> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Uplay.GameStarter.GameStarterReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Hotkeys() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Hotkeys(Hotkeys other) : this() {
      hotkeys_ = other.hotkeys_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Hotkeys Clone() {
      return new Hotkeys(this);
    }

    /// <summary>Field number for the "hotkeys" field.</summary>
    public const int Hotkeys_FieldNumber = 1;
    private static readonly pb::FieldCodec<global::Uplay.GameStarter.Hotkey> _repeated_hotkeys_codec
        = pb::FieldCodec.ForMessage(10, global::Uplay.GameStarter.Hotkey.Parser);
    private readonly pbc::RepeatedField<global::Uplay.GameStarter.Hotkey> hotkeys_ = new pbc::RepeatedField<global::Uplay.GameStarter.Hotkey>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Uplay.GameStarter.Hotkey> Hotkeys_ {
      get { return hotkeys_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Hotkeys);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Hotkeys other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!hotkeys_.Equals(other.hotkeys_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= hotkeys_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      hotkeys_.WriteTo(output, _repeated_hotkeys_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      hotkeys_.WriteTo(ref output, _repeated_hotkeys_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += hotkeys_.CalculateSize(_repeated_hotkeys_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Hotkeys other) {
      if (other == null) {
        return;
      }
      hotkeys_.Add(other.hotkeys_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            hotkeys_.AddEntriesFrom(input, _repeated_hotkeys_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            hotkeys_.AddEntriesFrom(ref input, _repeated_hotkeys_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class StartGrantedRsp : pb::IMessage<StartGrantedRsp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StartGrantedRsp> _parser = new pb::MessageParser<StartGrantedRsp>(() => new StartGrantedRsp());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<StartGrantedRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Uplay.GameStarter.GameStarterReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StartGrantedRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StartGrantedRsp(StartGrantedRsp other) : this() {
      _hasBits0 = other._hasBits0;
      overlayEnabled_ = other.overlayEnabled_;
      windowedMode_ = other.windowedMode_;
      executablePath_ = other.executablePath_;
      workingDirectory_ = other.workingDirectory_;
      arguments_ = other.arguments_;
      additionalArguments_ = other.additionalArguments_;
      uplayArguments_ = other.uplayArguments_;
      overlayInjectionMethod_ = other.overlayInjectionMethod_;
      hotkeys_ = other.hotkeys_ != null ? other.hotkeys_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StartGrantedRsp Clone() {
      return new StartGrantedRsp(this);
    }

    /// <summary>Field number for the "overlayEnabled" field.</summary>
    public const int OverlayEnabledFieldNumber = 1;
    private readonly static bool OverlayEnabledDefaultValue = false;

    private bool overlayEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool OverlayEnabled {
      get { if ((_hasBits0 & 1) != 0) { return overlayEnabled_; } else { return OverlayEnabledDefaultValue; } }
      set {
        _hasBits0 |= 1;
        overlayEnabled_ = value;
      }
    }
    /// <summary>Gets whether the "overlayEnabled" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOverlayEnabled {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "overlayEnabled" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOverlayEnabled() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "windowedMode" field.</summary>
    public const int WindowedModeFieldNumber = 2;
    private readonly static bool WindowedModeDefaultValue = false;

    private bool windowedMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool WindowedMode {
      get { if ((_hasBits0 & 2) != 0) { return windowedMode_; } else { return WindowedModeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        windowedMode_ = value;
      }
    }
    /// <summary>Gets whether the "windowedMode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasWindowedMode {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "windowedMode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearWindowedMode() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "executablePath" field.</summary>
    public const int ExecutablePathFieldNumber = 3;
    private readonly static string ExecutablePathDefaultValue = "";

    private string executablePath_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExecutablePath {
      get { return executablePath_ ?? ExecutablePathDefaultValue; }
      set {
        executablePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "executablePath" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasExecutablePath {
      get { return executablePath_ != null; }
    }
    /// <summary>Clears the value of the "executablePath" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearExecutablePath() {
      executablePath_ = null;
    }

    /// <summary>Field number for the "workingDirectory" field.</summary>
    public const int WorkingDirectoryFieldNumber = 4;
    private readonly static string WorkingDirectoryDefaultValue = "";

    private string workingDirectory_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string WorkingDirectory {
      get { return workingDirectory_ ?? WorkingDirectoryDefaultValue; }
      set {
        workingDirectory_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "workingDirectory" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasWorkingDirectory {
      get { return workingDirectory_ != null; }
    }
    /// <summary>Clears the value of the "workingDirectory" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearWorkingDirectory() {
      workingDirectory_ = null;
    }

    /// <summary>Field number for the "arguments" field.</summary>
    public const int ArgumentsFieldNumber = 5;
    private readonly static string ArgumentsDefaultValue = "";

    private string arguments_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Arguments {
      get { return arguments_ ?? ArgumentsDefaultValue; }
      set {
        arguments_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "arguments" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasArguments {
      get { return arguments_ != null; }
    }
    /// <summary>Clears the value of the "arguments" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearArguments() {
      arguments_ = null;
    }

    /// <summary>Field number for the "additionalArguments" field.</summary>
    public const int AdditionalArgumentsFieldNumber = 6;
    private readonly static string AdditionalArgumentsDefaultValue = "";

    private string additionalArguments_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AdditionalArguments {
      get { return additionalArguments_ ?? AdditionalArgumentsDefaultValue; }
      set {
        additionalArguments_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "additionalArguments" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAdditionalArguments {
      get { return additionalArguments_ != null; }
    }
    /// <summary>Clears the value of the "additionalArguments" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAdditionalArguments() {
      additionalArguments_ = null;
    }

    /// <summary>Field number for the "uplayArguments" field.</summary>
    public const int UplayArgumentsFieldNumber = 7;
    private readonly static string UplayArgumentsDefaultValue = "";

    private string uplayArguments_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string UplayArguments {
      get { return uplayArguments_ ?? UplayArgumentsDefaultValue; }
      set {
        uplayArguments_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "uplayArguments" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUplayArguments {
      get { return uplayArguments_ != null; }
    }
    /// <summary>Clears the value of the "uplayArguments" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUplayArguments() {
      uplayArguments_ = null;
    }

    /// <summary>Field number for the "overlayInjectionMethod" field.</summary>
    public const int OverlayInjectionMethodFieldNumber = 8;
    private readonly static global::Uplay.GameStarter.StartGrantedRsp.Types.OverlayInjectionMethod OverlayInjectionMethodDefaultValue = global::Uplay.GameStarter.StartGrantedRsp.Types.OverlayInjectionMethod.None;

    private global::Uplay.GameStarter.StartGrantedRsp.Types.OverlayInjectionMethod overlayInjectionMethod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Uplay.GameStarter.StartGrantedRsp.Types.OverlayInjectionMethod OverlayInjectionMethod {
      get { if ((_hasBits0 & 4) != 0) { return overlayInjectionMethod_; } else { return OverlayInjectionMethodDefaultValue; } }
      set {
        _hasBits0 |= 4;
        overlayInjectionMethod_ = value;
      }
    }
    /// <summary>Gets whether the "overlayInjectionMethod" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOverlayInjectionMethod {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "overlayInjectionMethod" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOverlayInjectionMethod() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "hotkeys" field.</summary>
    public const int HotkeysFieldNumber = 9;
    private global::Uplay.GameStarter.Hotkeys hotkeys_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Uplay.GameStarter.Hotkeys Hotkeys {
      get { return hotkeys_; }
      set {
        hotkeys_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as StartGrantedRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(StartGrantedRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OverlayEnabled != other.OverlayEnabled) return false;
      if (WindowedMode != other.WindowedMode) return false;
      if (ExecutablePath != other.ExecutablePath) return false;
      if (WorkingDirectory != other.WorkingDirectory) return false;
      if (Arguments != other.Arguments) return false;
      if (AdditionalArguments != other.AdditionalArguments) return false;
      if (UplayArguments != other.UplayArguments) return false;
      if (OverlayInjectionMethod != other.OverlayInjectionMethod) return false;
      if (!object.Equals(Hotkeys, other.Hotkeys)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOverlayEnabled) hash ^= OverlayEnabled.GetHashCode();
      if (HasWindowedMode) hash ^= WindowedMode.GetHashCode();
      if (HasExecutablePath) hash ^= ExecutablePath.GetHashCode();
      if (HasWorkingDirectory) hash ^= WorkingDirectory.GetHashCode();
      if (HasArguments) hash ^= Arguments.GetHashCode();
      if (HasAdditionalArguments) hash ^= AdditionalArguments.GetHashCode();
      if (HasUplayArguments) hash ^= UplayArguments.GetHashCode();
      if (HasOverlayInjectionMethod) hash ^= OverlayInjectionMethod.GetHashCode();
      if (hotkeys_ != null) hash ^= Hotkeys.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOverlayEnabled) {
        output.WriteRawTag(8);
        output.WriteBool(OverlayEnabled);
      }
      if (HasWindowedMode) {
        output.WriteRawTag(16);
        output.WriteBool(WindowedMode);
      }
      if (HasExecutablePath) {
        output.WriteRawTag(26);
        output.WriteString(ExecutablePath);
      }
      if (HasWorkingDirectory) {
        output.WriteRawTag(34);
        output.WriteString(WorkingDirectory);
      }
      if (HasArguments) {
        output.WriteRawTag(42);
        output.WriteString(Arguments);
      }
      if (HasAdditionalArguments) {
        output.WriteRawTag(50);
        output.WriteString(AdditionalArguments);
      }
      if (HasUplayArguments) {
        output.WriteRawTag(58);
        output.WriteString(UplayArguments);
      }
      if (HasOverlayInjectionMethod) {
        output.WriteRawTag(64);
        output.WriteEnum((int) OverlayInjectionMethod);
      }
      if (hotkeys_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Hotkeys);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOverlayEnabled) {
        output.WriteRawTag(8);
        output.WriteBool(OverlayEnabled);
      }
      if (HasWindowedMode) {
        output.WriteRawTag(16);
        output.WriteBool(WindowedMode);
      }
      if (HasExecutablePath) {
        output.WriteRawTag(26);
        output.WriteString(ExecutablePath);
      }
      if (HasWorkingDirectory) {
        output.WriteRawTag(34);
        output.WriteString(WorkingDirectory);
      }
      if (HasArguments) {
        output.WriteRawTag(42);
        output.WriteString(Arguments);
      }
      if (HasAdditionalArguments) {
        output.WriteRawTag(50);
        output.WriteString(AdditionalArguments);
      }
      if (HasUplayArguments) {
        output.WriteRawTag(58);
        output.WriteString(UplayArguments);
      }
      if (HasOverlayInjectionMethod) {
        output.WriteRawTag(64);
        output.WriteEnum((int) OverlayInjectionMethod);
      }
      if (hotkeys_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Hotkeys);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasOverlayEnabled) {
        size += 1 + 1;
      }
      if (HasWindowedMode) {
        size += 1 + 1;
      }
      if (HasExecutablePath) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExecutablePath);
      }
      if (HasWorkingDirectory) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WorkingDirectory);
      }
      if (HasArguments) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Arguments);
      }
      if (HasAdditionalArguments) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AdditionalArguments);
      }
      if (HasUplayArguments) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UplayArguments);
      }
      if (HasOverlayInjectionMethod) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OverlayInjectionMethod);
      }
      if (hotkeys_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hotkeys);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(StartGrantedRsp other) {
      if (other == null) {
        return;
      }
      if (other.HasOverlayEnabled) {
        OverlayEnabled = other.OverlayEnabled;
      }
      if (other.HasWindowedMode) {
        WindowedMode = other.WindowedMode;
      }
      if (other.HasExecutablePath) {
        ExecutablePath = other.ExecutablePath;
      }
      if (other.HasWorkingDirectory) {
        WorkingDirectory = other.WorkingDirectory;
      }
      if (other.HasArguments) {
        Arguments = other.Arguments;
      }
      if (other.HasAdditionalArguments) {
        AdditionalArguments = other.AdditionalArguments;
      }
      if (other.HasUplayArguments) {
        UplayArguments = other.UplayArguments;
      }
      if (other.HasOverlayInjectionMethod) {
        OverlayInjectionMethod = other.OverlayInjectionMethod;
      }
      if (other.hotkeys_ != null) {
        if (hotkeys_ == null) {
          Hotkeys = new global::Uplay.GameStarter.Hotkeys();
        }
        Hotkeys.MergeFrom(other.Hotkeys);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OverlayEnabled = input.ReadBool();
            break;
          }
          case 16: {
            WindowedMode = input.ReadBool();
            break;
          }
          case 26: {
            ExecutablePath = input.ReadString();
            break;
          }
          case 34: {
            WorkingDirectory = input.ReadString();
            break;
          }
          case 42: {
            Arguments = input.ReadString();
            break;
          }
          case 50: {
            AdditionalArguments = input.ReadString();
            break;
          }
          case 58: {
            UplayArguments = input.ReadString();
            break;
          }
          case 64: {
            OverlayInjectionMethod = (global::Uplay.GameStarter.StartGrantedRsp.Types.OverlayInjectionMethod) input.ReadEnum();
            break;
          }
          case 74: {
            if (hotkeys_ == null) {
              Hotkeys = new global::Uplay.GameStarter.Hotkeys();
            }
            input.ReadMessage(Hotkeys);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            OverlayEnabled = input.ReadBool();
            break;
          }
          case 16: {
            WindowedMode = input.ReadBool();
            break;
          }
          case 26: {
            ExecutablePath = input.ReadString();
            break;
          }
          case 34: {
            WorkingDirectory = input.ReadString();
            break;
          }
          case 42: {
            Arguments = input.ReadString();
            break;
          }
          case 50: {
            AdditionalArguments = input.ReadString();
            break;
          }
          case 58: {
            UplayArguments = input.ReadString();
            break;
          }
          case 64: {
            OverlayInjectionMethod = (global::Uplay.GameStarter.StartGrantedRsp.Types.OverlayInjectionMethod) input.ReadEnum();
            break;
          }
          case 74: {
            if (hotkeys_ == null) {
              Hotkeys = new global::Uplay.GameStarter.Hotkeys();
            }
            input.ReadMessage(Hotkeys);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the StartGrantedRsp message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public enum OverlayInjectionMethod {
        [pbr::OriginalName("OverlayInjectionMethod_None")] None = 1,
        [pbr::OriginalName("OverlayInjectionMethod_Default")] Default = 2,
        [pbr::OriginalName("OverlayInjectionMethod_SDK")] Sdk = 3,
      }

    }
    #endregion

  }

  public sealed partial class StartDeniedRsp : pb::IMessage<StartDeniedRsp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StartDeniedRsp> _parser = new pb::MessageParser<StartDeniedRsp>(() => new StartDeniedRsp());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<StartDeniedRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Uplay.GameStarter.GameStarterReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StartDeniedRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StartDeniedRsp(StartDeniedRsp other) : this() {
      _hasBits0 = other._hasBits0;
      reason_ = other.reason_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StartDeniedRsp Clone() {
      return new StartDeniedRsp(this);
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 1;
    private readonly static global::Uplay.GameStarter.StartDeniedRsp.Types.Reason ReasonDefaultValue = global::Uplay.GameStarter.StartDeniedRsp.Types.Reason.GamePatchRequired;

    private global::Uplay.GameStarter.StartDeniedRsp.Types.Reason reason_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Uplay.GameStarter.StartDeniedRsp.Types.Reason Reason {
      get { if ((_hasBits0 & 1) != 0) { return reason_; } else { return ReasonDefaultValue; } }
      set {
        _hasBits0 |= 1;
        reason_ = value;
      }
    }
    /// <summary>Gets whether the "reason" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasReason {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "reason" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearReason() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as StartDeniedRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(StartDeniedRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Reason != other.Reason) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasReason) hash ^= Reason.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasReason) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Reason);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasReason) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Reason);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasReason) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Reason);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(StartDeniedRsp other) {
      if (other == null) {
        return;
      }
      if (other.HasReason) {
        Reason = other.Reason;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Reason = (global::Uplay.GameStarter.StartDeniedRsp.Types.Reason) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Reason = (global::Uplay.GameStarter.StartDeniedRsp.Types.Reason) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the StartDeniedRsp message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public enum Reason {
        [pbr::OriginalName("GamePatchRequired")] GamePatchRequired = 0,
      }

    }
    #endregion

  }

  public sealed partial class UpdateRequiredRsp : pb::IMessage<UpdateRequiredRsp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UpdateRequiredRsp> _parser = new pb::MessageParser<UpdateRequiredRsp>(() => new UpdateRequiredRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<UpdateRequiredRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Uplay.GameStarter.GameStarterReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UpdateRequiredRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UpdateRequiredRsp(UpdateRequiredRsp other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UpdateRequiredRsp Clone() {
      return new UpdateRequiredRsp(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as UpdateRequiredRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(UpdateRequiredRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(UpdateRequiredRsp other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class ConfirmationRsp : pb::IMessage<ConfirmationRsp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ConfirmationRsp> _parser = new pb::MessageParser<ConfirmationRsp>(() => new ConfirmationRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ConfirmationRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Uplay.GameStarter.GameStarterReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ConfirmationRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ConfirmationRsp(ConfirmationRsp other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ConfirmationRsp Clone() {
      return new ConfirmationRsp(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ConfirmationRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ConfirmationRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ConfirmationRsp other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class Req : pb::IMessage<Req>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Req> _parser = new pb::MessageParser<Req>(() => new Req());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Req> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Uplay.GameStarter.GameStarterReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Req() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Req(Req other) : this() {
      startReq_ = other.startReq_ != null ? other.startReq_.Clone() : null;
      hotkeyStateChangedReq_ = other.hotkeyStateChangedReq_ != null ? other.hotkeyStateChangedReq_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Req Clone() {
      return new Req(this);
    }

    /// <summary>Field number for the "startReq" field.</summary>
    public const int StartReqFieldNumber = 1;
    private global::Uplay.GameStarter.StartReq startReq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Uplay.GameStarter.StartReq StartReq {
      get { return startReq_; }
      set {
        startReq_ = value;
      }
    }

    /// <summary>Field number for the "hotkeyStateChangedReq" field.</summary>
    public const int HotkeyStateChangedReqFieldNumber = 3;
    private global::Uplay.GameStarter.HotkeyStateChangedReq hotkeyStateChangedReq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Uplay.GameStarter.HotkeyStateChangedReq HotkeyStateChangedReq {
      get { return hotkeyStateChangedReq_; }
      set {
        hotkeyStateChangedReq_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Req);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Req other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(StartReq, other.StartReq)) return false;
      if (!object.Equals(HotkeyStateChangedReq, other.HotkeyStateChangedReq)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (startReq_ != null) hash ^= StartReq.GetHashCode();
      if (hotkeyStateChangedReq_ != null) hash ^= HotkeyStateChangedReq.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (startReq_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StartReq);
      }
      if (hotkeyStateChangedReq_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(HotkeyStateChangedReq);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (startReq_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StartReq);
      }
      if (hotkeyStateChangedReq_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(HotkeyStateChangedReq);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (startReq_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartReq);
      }
      if (hotkeyStateChangedReq_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HotkeyStateChangedReq);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Req other) {
      if (other == null) {
        return;
      }
      if (other.startReq_ != null) {
        if (startReq_ == null) {
          StartReq = new global::Uplay.GameStarter.StartReq();
        }
        StartReq.MergeFrom(other.StartReq);
      }
      if (other.hotkeyStateChangedReq_ != null) {
        if (hotkeyStateChangedReq_ == null) {
          HotkeyStateChangedReq = new global::Uplay.GameStarter.HotkeyStateChangedReq();
        }
        HotkeyStateChangedReq.MergeFrom(other.HotkeyStateChangedReq);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (startReq_ == null) {
              StartReq = new global::Uplay.GameStarter.StartReq();
            }
            input.ReadMessage(StartReq);
            break;
          }
          case 26: {
            if (hotkeyStateChangedReq_ == null) {
              HotkeyStateChangedReq = new global::Uplay.GameStarter.HotkeyStateChangedReq();
            }
            input.ReadMessage(HotkeyStateChangedReq);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (startReq_ == null) {
              StartReq = new global::Uplay.GameStarter.StartReq();
            }
            input.ReadMessage(StartReq);
            break;
          }
          case 26: {
            if (hotkeyStateChangedReq_ == null) {
              HotkeyStateChangedReq = new global::Uplay.GameStarter.HotkeyStateChangedReq();
            }
            input.ReadMessage(HotkeyStateChangedReq);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ReconnectPush : pb::IMessage<ReconnectPush>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ReconnectPush> _parser = new pb::MessageParser<ReconnectPush>(() => new ReconnectPush());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ReconnectPush> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Uplay.GameStarter.GameStarterReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ReconnectPush() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ReconnectPush(ReconnectPush other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ReconnectPush Clone() {
      return new ReconnectPush(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ReconnectPush);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ReconnectPush other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ReconnectPush other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class UserInteractionRequiredPush : pb::IMessage<UserInteractionRequiredPush>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UserInteractionRequiredPush> _parser = new pb::MessageParser<UserInteractionRequiredPush>(() => new UserInteractionRequiredPush());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<UserInteractionRequiredPush> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Uplay.GameStarter.GameStarterReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserInteractionRequiredPush() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserInteractionRequiredPush(UserInteractionRequiredPush other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserInteractionRequiredPush Clone() {
      return new UserInteractionRequiredPush(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as UserInteractionRequiredPush);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(UserInteractionRequiredPush other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(UserInteractionRequiredPush other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class SteamOverlayShowPush : pb::IMessage<SteamOverlayShowPush>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SteamOverlayShowPush> _parser = new pb::MessageParser<SteamOverlayShowPush>(() => new SteamOverlayShowPush());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SteamOverlayShowPush> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Uplay.GameStarter.GameStarterReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SteamOverlayShowPush() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SteamOverlayShowPush(SteamOverlayShowPush other) : this() {
      _hasBits0 = other._hasBits0;
      url_ = other.url_;
      steamAppId_ = other.steamAppId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SteamOverlayShowPush Clone() {
      return new SteamOverlayShowPush(this);
    }

    /// <summary>Field number for the "url" field.</summary>
    public const int UrlFieldNumber = 1;
    private readonly static string UrlDefaultValue = "";

    private string url_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Url {
      get { return url_ ?? UrlDefaultValue; }
      set {
        url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "url" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUrl {
      get { return url_ != null; }
    }
    /// <summary>Clears the value of the "url" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUrl() {
      url_ = null;
    }

    /// <summary>Field number for the "steamAppId" field.</summary>
    public const int SteamAppIdFieldNumber = 2;
    private readonly static uint SteamAppIdDefaultValue = 0;

    private uint steamAppId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint SteamAppId {
      get { if ((_hasBits0 & 1) != 0) { return steamAppId_; } else { return SteamAppIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        steamAppId_ = value;
      }
    }
    /// <summary>Gets whether the "steamAppId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSteamAppId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "steamAppId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSteamAppId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SteamOverlayShowPush);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SteamOverlayShowPush other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Url != other.Url) return false;
      if (SteamAppId != other.SteamAppId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUrl) hash ^= Url.GetHashCode();
      if (HasSteamAppId) hash ^= SteamAppId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasUrl) {
        output.WriteRawTag(10);
        output.WriteString(Url);
      }
      if (HasSteamAppId) {
        output.WriteRawTag(16);
        output.WriteUInt32(SteamAppId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasUrl) {
        output.WriteRawTag(10);
        output.WriteString(Url);
      }
      if (HasSteamAppId) {
        output.WriteRawTag(16);
        output.WriteUInt32(SteamAppId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasUrl) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
      }
      if (HasSteamAppId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SteamAppId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SteamOverlayShowPush other) {
      if (other == null) {
        return;
      }
      if (other.HasUrl) {
        Url = other.Url;
      }
      if (other.HasSteamAppId) {
        SteamAppId = other.SteamAppId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Url = input.ReadString();
            break;
          }
          case 16: {
            SteamAppId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Url = input.ReadString();
            break;
          }
          case 16: {
            SteamAppId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class UpdateHotKeysPush : pb::IMessage<UpdateHotKeysPush>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UpdateHotKeysPush> _parser = new pb::MessageParser<UpdateHotKeysPush>(() => new UpdateHotKeysPush());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<UpdateHotKeysPush> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Uplay.GameStarter.GameStarterReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UpdateHotKeysPush() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UpdateHotKeysPush(UpdateHotKeysPush other) : this() {
      hotkeys_ = other.hotkeys_ != null ? other.hotkeys_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UpdateHotKeysPush Clone() {
      return new UpdateHotKeysPush(this);
    }

    /// <summary>Field number for the "hotkeys" field.</summary>
    public const int HotkeysFieldNumber = 1;
    private global::Uplay.GameStarter.Hotkeys hotkeys_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Uplay.GameStarter.Hotkeys Hotkeys {
      get { return hotkeys_; }
      set {
        hotkeys_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as UpdateHotKeysPush);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(UpdateHotKeysPush other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Hotkeys, other.Hotkeys)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (hotkeys_ != null) hash ^= Hotkeys.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (hotkeys_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Hotkeys);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (hotkeys_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Hotkeys);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (hotkeys_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hotkeys);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(UpdateHotKeysPush other) {
      if (other == null) {
        return;
      }
      if (other.hotkeys_ != null) {
        if (hotkeys_ == null) {
          Hotkeys = new global::Uplay.GameStarter.Hotkeys();
        }
        Hotkeys.MergeFrom(other.Hotkeys);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (hotkeys_ == null) {
              Hotkeys = new global::Uplay.GameStarter.Hotkeys();
            }
            input.ReadMessage(Hotkeys);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (hotkeys_ == null) {
              Hotkeys = new global::Uplay.GameStarter.Hotkeys();
            }
            input.ReadMessage(Hotkeys);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Push : pb::IMessage<Push>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Push> _parser = new pb::MessageParser<Push>(() => new Push());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Push> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Uplay.GameStarter.GameStarterReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Push() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Push(Push other) : this() {
      reconnectPush_ = other.reconnectPush_ != null ? other.reconnectPush_.Clone() : null;
      userInteractionRequiredPush_ = other.userInteractionRequiredPush_ != null ? other.userInteractionRequiredPush_.Clone() : null;
      steamOverlayShowPush_ = other.steamOverlayShowPush_ != null ? other.steamOverlayShowPush_.Clone() : null;
      updateHotKeysPush_ = other.updateHotKeysPush_ != null ? other.updateHotKeysPush_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Push Clone() {
      return new Push(this);
    }

    /// <summary>Field number for the "reconnectPush" field.</summary>
    public const int ReconnectPushFieldNumber = 2;
    private global::Uplay.GameStarter.ReconnectPush reconnectPush_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Uplay.GameStarter.ReconnectPush ReconnectPush {
      get { return reconnectPush_; }
      set {
        reconnectPush_ = value;
      }
    }

    /// <summary>Field number for the "userInteractionRequiredPush" field.</summary>
    public const int UserInteractionRequiredPushFieldNumber = 3;
    private global::Uplay.GameStarter.UserInteractionRequiredPush userInteractionRequiredPush_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Uplay.GameStarter.UserInteractionRequiredPush UserInteractionRequiredPush {
      get { return userInteractionRequiredPush_; }
      set {
        userInteractionRequiredPush_ = value;
      }
    }

    /// <summary>Field number for the "steamOverlayShowPush" field.</summary>
    public const int SteamOverlayShowPushFieldNumber = 4;
    private global::Uplay.GameStarter.SteamOverlayShowPush steamOverlayShowPush_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Uplay.GameStarter.SteamOverlayShowPush SteamOverlayShowPush {
      get { return steamOverlayShowPush_; }
      set {
        steamOverlayShowPush_ = value;
      }
    }

    /// <summary>Field number for the "updateHotKeysPush" field.</summary>
    public const int UpdateHotKeysPushFieldNumber = 5;
    private global::Uplay.GameStarter.UpdateHotKeysPush updateHotKeysPush_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Uplay.GameStarter.UpdateHotKeysPush UpdateHotKeysPush {
      get { return updateHotKeysPush_; }
      set {
        updateHotKeysPush_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Push);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Push other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ReconnectPush, other.ReconnectPush)) return false;
      if (!object.Equals(UserInteractionRequiredPush, other.UserInteractionRequiredPush)) return false;
      if (!object.Equals(SteamOverlayShowPush, other.SteamOverlayShowPush)) return false;
      if (!object.Equals(UpdateHotKeysPush, other.UpdateHotKeysPush)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (reconnectPush_ != null) hash ^= ReconnectPush.GetHashCode();
      if (userInteractionRequiredPush_ != null) hash ^= UserInteractionRequiredPush.GetHashCode();
      if (steamOverlayShowPush_ != null) hash ^= SteamOverlayShowPush.GetHashCode();
      if (updateHotKeysPush_ != null) hash ^= UpdateHotKeysPush.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (reconnectPush_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ReconnectPush);
      }
      if (userInteractionRequiredPush_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UserInteractionRequiredPush);
      }
      if (steamOverlayShowPush_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(SteamOverlayShowPush);
      }
      if (updateHotKeysPush_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(UpdateHotKeysPush);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (reconnectPush_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ReconnectPush);
      }
      if (userInteractionRequiredPush_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UserInteractionRequiredPush);
      }
      if (steamOverlayShowPush_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(SteamOverlayShowPush);
      }
      if (updateHotKeysPush_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(UpdateHotKeysPush);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (reconnectPush_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReconnectPush);
      }
      if (userInteractionRequiredPush_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserInteractionRequiredPush);
      }
      if (steamOverlayShowPush_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SteamOverlayShowPush);
      }
      if (updateHotKeysPush_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateHotKeysPush);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Push other) {
      if (other == null) {
        return;
      }
      if (other.reconnectPush_ != null) {
        if (reconnectPush_ == null) {
          ReconnectPush = new global::Uplay.GameStarter.ReconnectPush();
        }
        ReconnectPush.MergeFrom(other.ReconnectPush);
      }
      if (other.userInteractionRequiredPush_ != null) {
        if (userInteractionRequiredPush_ == null) {
          UserInteractionRequiredPush = new global::Uplay.GameStarter.UserInteractionRequiredPush();
        }
        UserInteractionRequiredPush.MergeFrom(other.UserInteractionRequiredPush);
      }
      if (other.steamOverlayShowPush_ != null) {
        if (steamOverlayShowPush_ == null) {
          SteamOverlayShowPush = new global::Uplay.GameStarter.SteamOverlayShowPush();
        }
        SteamOverlayShowPush.MergeFrom(other.SteamOverlayShowPush);
      }
      if (other.updateHotKeysPush_ != null) {
        if (updateHotKeysPush_ == null) {
          UpdateHotKeysPush = new global::Uplay.GameStarter.UpdateHotKeysPush();
        }
        UpdateHotKeysPush.MergeFrom(other.UpdateHotKeysPush);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            if (reconnectPush_ == null) {
              ReconnectPush = new global::Uplay.GameStarter.ReconnectPush();
            }
            input.ReadMessage(ReconnectPush);
            break;
          }
          case 26: {
            if (userInteractionRequiredPush_ == null) {
              UserInteractionRequiredPush = new global::Uplay.GameStarter.UserInteractionRequiredPush();
            }
            input.ReadMessage(UserInteractionRequiredPush);
            break;
          }
          case 34: {
            if (steamOverlayShowPush_ == null) {
              SteamOverlayShowPush = new global::Uplay.GameStarter.SteamOverlayShowPush();
            }
            input.ReadMessage(SteamOverlayShowPush);
            break;
          }
          case 42: {
            if (updateHotKeysPush_ == null) {
              UpdateHotKeysPush = new global::Uplay.GameStarter.UpdateHotKeysPush();
            }
            input.ReadMessage(UpdateHotKeysPush);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 18: {
            if (reconnectPush_ == null) {
              ReconnectPush = new global::Uplay.GameStarter.ReconnectPush();
            }
            input.ReadMessage(ReconnectPush);
            break;
          }
          case 26: {
            if (userInteractionRequiredPush_ == null) {
              UserInteractionRequiredPush = new global::Uplay.GameStarter.UserInteractionRequiredPush();
            }
            input.ReadMessage(UserInteractionRequiredPush);
            break;
          }
          case 34: {
            if (steamOverlayShowPush_ == null) {
              SteamOverlayShowPush = new global::Uplay.GameStarter.SteamOverlayShowPush();
            }
            input.ReadMessage(SteamOverlayShowPush);
            break;
          }
          case 42: {
            if (updateHotKeysPush_ == null) {
              UpdateHotKeysPush = new global::Uplay.GameStarter.UpdateHotKeysPush();
            }
            input.ReadMessage(UpdateHotKeysPush);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Rsp : pb::IMessage<Rsp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Rsp> _parser = new pb::MessageParser<Rsp>(() => new Rsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Rsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Uplay.GameStarter.GameStarterReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Rsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Rsp(Rsp other) : this() {
      startGrantedRsp_ = other.startGrantedRsp_ != null ? other.startGrantedRsp_.Clone() : null;
      startDeniedRsp_ = other.startDeniedRsp_ != null ? other.startDeniedRsp_.Clone() : null;
      discordRichPresence_ = other.discordRichPresence_ != null ? other.discordRichPresence_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Rsp Clone() {
      return new Rsp(this);
    }

    /// <summary>Field number for the "startGrantedRsp" field.</summary>
    public const int StartGrantedRspFieldNumber = 1;
    private global::Uplay.GameStarter.StartGrantedRsp startGrantedRsp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Uplay.GameStarter.StartGrantedRsp StartGrantedRsp {
      get { return startGrantedRsp_; }
      set {
        startGrantedRsp_ = value;
      }
    }

    /// <summary>Field number for the "startDeniedRsp" field.</summary>
    public const int StartDeniedRspFieldNumber = 2;
    private global::Uplay.GameStarter.StartDeniedRsp startDeniedRsp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Uplay.GameStarter.StartDeniedRsp StartDeniedRsp {
      get { return startDeniedRsp_; }
      set {
        startDeniedRsp_ = value;
      }
    }

    /// <summary>Field number for the "discordRichPresence" field.</summary>
    public const int DiscordRichPresenceFieldNumber = 3;
    private global::Uplay.GameStarter.DiscordRichPresence discordRichPresence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Uplay.GameStarter.DiscordRichPresence DiscordRichPresence {
      get { return discordRichPresence_; }
      set {
        discordRichPresence_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Rsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Rsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(StartGrantedRsp, other.StartGrantedRsp)) return false;
      if (!object.Equals(StartDeniedRsp, other.StartDeniedRsp)) return false;
      if (!object.Equals(DiscordRichPresence, other.DiscordRichPresence)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (startGrantedRsp_ != null) hash ^= StartGrantedRsp.GetHashCode();
      if (startDeniedRsp_ != null) hash ^= StartDeniedRsp.GetHashCode();
      if (discordRichPresence_ != null) hash ^= DiscordRichPresence.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (startGrantedRsp_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StartGrantedRsp);
      }
      if (startDeniedRsp_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(StartDeniedRsp);
      }
      if (discordRichPresence_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DiscordRichPresence);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (startGrantedRsp_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StartGrantedRsp);
      }
      if (startDeniedRsp_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(StartDeniedRsp);
      }
      if (discordRichPresence_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DiscordRichPresence);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (startGrantedRsp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartGrantedRsp);
      }
      if (startDeniedRsp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartDeniedRsp);
      }
      if (discordRichPresence_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DiscordRichPresence);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Rsp other) {
      if (other == null) {
        return;
      }
      if (other.startGrantedRsp_ != null) {
        if (startGrantedRsp_ == null) {
          StartGrantedRsp = new global::Uplay.GameStarter.StartGrantedRsp();
        }
        StartGrantedRsp.MergeFrom(other.StartGrantedRsp);
      }
      if (other.startDeniedRsp_ != null) {
        if (startDeniedRsp_ == null) {
          StartDeniedRsp = new global::Uplay.GameStarter.StartDeniedRsp();
        }
        StartDeniedRsp.MergeFrom(other.StartDeniedRsp);
      }
      if (other.discordRichPresence_ != null) {
        if (discordRichPresence_ == null) {
          DiscordRichPresence = new global::Uplay.GameStarter.DiscordRichPresence();
        }
        DiscordRichPresence.MergeFrom(other.DiscordRichPresence);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (startGrantedRsp_ == null) {
              StartGrantedRsp = new global::Uplay.GameStarter.StartGrantedRsp();
            }
            input.ReadMessage(StartGrantedRsp);
            break;
          }
          case 18: {
            if (startDeniedRsp_ == null) {
              StartDeniedRsp = new global::Uplay.GameStarter.StartDeniedRsp();
            }
            input.ReadMessage(StartDeniedRsp);
            break;
          }
          case 26: {
            if (discordRichPresence_ == null) {
              DiscordRichPresence = new global::Uplay.GameStarter.DiscordRichPresence();
            }
            input.ReadMessage(DiscordRichPresence);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (startGrantedRsp_ == null) {
              StartGrantedRsp = new global::Uplay.GameStarter.StartGrantedRsp();
            }
            input.ReadMessage(StartGrantedRsp);
            break;
          }
          case 18: {
            if (startDeniedRsp_ == null) {
              StartDeniedRsp = new global::Uplay.GameStarter.StartDeniedRsp();
            }
            input.ReadMessage(StartDeniedRsp);
            break;
          }
          case 26: {
            if (discordRichPresence_ == null) {
              DiscordRichPresence = new global::Uplay.GameStarter.DiscordRichPresence();
            }
            input.ReadMessage(DiscordRichPresence);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Upstream : pb::IMessage<Upstream>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Upstream> _parser = new pb::MessageParser<Upstream>(() => new Upstream());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Upstream> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Uplay.GameStarter.GameStarterReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Upstream() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Upstream(Upstream other) : this() {
      req_ = other.req_ != null ? other.req_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Upstream Clone() {
      return new Upstream(this);
    }

    /// <summary>Field number for the "req" field.</summary>
    public const int ReqFieldNumber = 1;
    private global::Uplay.GameStarter.Req req_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Uplay.GameStarter.Req Req {
      get { return req_; }
      set {
        req_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Upstream);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Upstream other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Req, other.Req)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (req_ != null) hash ^= Req.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (req_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Req);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (req_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Req);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (req_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Req);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Upstream other) {
      if (other == null) {
        return;
      }
      if (other.req_ != null) {
        if (req_ == null) {
          Req = new global::Uplay.GameStarter.Req();
        }
        Req.MergeFrom(other.Req);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (req_ == null) {
              Req = new global::Uplay.GameStarter.Req();
            }
            input.ReadMessage(Req);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (req_ == null) {
              Req = new global::Uplay.GameStarter.Req();
            }
            input.ReadMessage(Req);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Downstream : pb::IMessage<Downstream>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Downstream> _parser = new pb::MessageParser<Downstream>(() => new Downstream());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Downstream> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Uplay.GameStarter.GameStarterReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Downstream() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Downstream(Downstream other) : this() {
      push_ = other.push_ != null ? other.push_.Clone() : null;
      rsp_ = other.rsp_ != null ? other.rsp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Downstream Clone() {
      return new Downstream(this);
    }

    /// <summary>Field number for the "push" field.</summary>
    public const int PushFieldNumber = 1;
    private global::Uplay.GameStarter.Push push_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Uplay.GameStarter.Push Push {
      get { return push_; }
      set {
        push_ = value;
      }
    }

    /// <summary>Field number for the "rsp" field.</summary>
    public const int RspFieldNumber = 2;
    private global::Uplay.GameStarter.Rsp rsp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Uplay.GameStarter.Rsp Rsp {
      get { return rsp_; }
      set {
        rsp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Downstream);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Downstream other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Push, other.Push)) return false;
      if (!object.Equals(Rsp, other.Rsp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (push_ != null) hash ^= Push.GetHashCode();
      if (rsp_ != null) hash ^= Rsp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (push_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Push);
      }
      if (rsp_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Rsp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (push_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Push);
      }
      if (rsp_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Rsp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (push_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Push);
      }
      if (rsp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rsp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Downstream other) {
      if (other == null) {
        return;
      }
      if (other.push_ != null) {
        if (push_ == null) {
          Push = new global::Uplay.GameStarter.Push();
        }
        Push.MergeFrom(other.Push);
      }
      if (other.rsp_ != null) {
        if (rsp_ == null) {
          Rsp = new global::Uplay.GameStarter.Rsp();
        }
        Rsp.MergeFrom(other.Rsp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (push_ == null) {
              Push = new global::Uplay.GameStarter.Push();
            }
            input.ReadMessage(Push);
            break;
          }
          case 18: {
            if (rsp_ == null) {
              Rsp = new global::Uplay.GameStarter.Rsp();
            }
            input.ReadMessage(Rsp);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (push_ == null) {
              Push = new global::Uplay.GameStarter.Push();
            }
            input.ReadMessage(Push);
            break;
          }
          case 18: {
            if (rsp_ == null) {
              Rsp = new global::Uplay.GameStarter.Rsp();
            }
            input.ReadMessage(Rsp);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
