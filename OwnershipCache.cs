// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ownership_cache.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Uplay.OwnershipCache {

  /// <summary>Holder for reflection information generated from ownership_cache.proto</summary>
  public static partial class OwnershipCacheReflection {

    #region Descriptor
    /// <summary>File descriptor for ownership_cache.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static OwnershipCacheReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiF1cGNfZHVtcF8xMC9vd25lcnNoaXBfY2FjaGUucHJvdG8SG21nLnByb3Rv",
            "Y29sLm93bmVyc2hpcF9jYWNoZSKpBwoJT3duZWRHYW1lEhIKCnByb2R1Y3Rf",
            "aWQYASACKA0SEAoIdXBsYXlfaWQYAiABKA0SEwoLZG93bmxvYWRfaWQYCSAB",
            "KA0SEAoIb3JiaXRfaWQYAyABKA0SDgoGY2Rfa2V5GAQgASgJEhAKCHBsYXRm",
            "b3JtGAUgASgNEhQKDHByb2R1Y3RfdHlwZRgGIAEoDRINCgVzdGF0ZRgHIAEo",
            "DRIcChRwcm9kdWN0X2Fzc29jaWF0aW9ucxgIIAMoDRIRCglnYW1lX2NvZGUY",
            "CiABKAkSEAoIYnJhbmRfaWQYCyABKA0SJAoccGVuZGluZ19rZXlzdG9yYWdl",
            "X293bmVyc2hpcBgMIAEoCBIXCg9sZWdhY3lfc3BhY2VfaWQYDSABKAkSFQoN",
            "bGVnYWN5X2FwcF9pZBgOIAEoCRISCgpnYW1lX3Rva2VuGA8gASgJEhYKDmFj",
            "dGl2YXRpb25faWRzGBAgAygNEkwKDnRhcmdldF9wYXJ0bmVyGBEgASgOMjQu",
            "bWcucHJvdG9jb2wub3duZXJzaGlwX2NhY2hlLk93bmVkR2FtZS5UYXJnZXRQ",
            "YXJ0bmVyEk4KD2FjdGl2YXRpb25fdHlwZRgSIAEoDjI1Lm1nLnByb3RvY29s",
            "Lm93bmVyc2hpcF9jYWNoZS5Pd25lZEdhbWUuQWN0aXZhdGlvblR5cGUSGgoS",
            "dWJpU2VydmljZXNfYXBwX2lkGBMgASgJInsKDVRhcmdldFBhcnRuZXISFgoS",
            "VGFyZ2V0UGFydG5lcl9Ob25lEAASGwoXVGFyZ2V0UGFydG5lcl9FcGljR2Ft",
            "ZXMQARIYChRUYXJnZXRQYXJ0bmVyX05lb3dpehACEhsKF1RhcmdldFBhcnRu",
            "ZXJfTWljcm9zb2Z0EAMiaAoOQWN0aXZhdGlvblR5cGUSGwoXQWN0aXZhdGlv",
            "blR5cGVfUHVyY2hhc2UQABIYChRBY3RpdmF0aW9uVHlwZV9UcmlhbBABEh8K",
            "G0FjdGl2YXRpb25UeXBlX1N1YnNjcmlwdGlvbhACIqEBCgxQYWNrYWdlU3Rh",
            "dGUSHAoYUGFja2FnZVN0YXRlX1VuYXZhaWxhYmxlEAASHAoYUGFja2FnZVN0",
            "YXRlX1ByZVJlbGVhc2VkEAESIAocUGFja2FnZVN0YXRlX1ByZURvd25sb2Fk",
            "YWJsZRACEhkKFVBhY2thZ2VTdGF0ZV9SZWxlYXNlZBADEhgKFFBhY2thZ2VT",
            "dGF0ZV9FeHBpcmVkEAQijgEKDk93bmVyc2hpcENhY2hlEjsKC293bmVkX2dh",
            "bWVzGAEgAygLMiYubWcucHJvdG9jb2wub3duZXJzaGlwX2NhY2hlLk93bmVk",
            "R2FtZRITCgtwcm9kdWN0X2lkcxgCIAMoDRIqCiJ2aXNpYmxlX29yX2luc3Rh",
            "bGxhYmxlX3Byb2R1Y3RfaWRzGAMgAygN"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Uplay.OwnershipCache.OwnedGame), global::Uplay.OwnershipCache.OwnedGame.Parser, new[]{ "ProductId", "UplayId", "DownloadId", "OrbitId", "CdKey", "Platform", "ProductType", "State", "ProductAssociations", "GameCode", "BrandId", "PendingKeystorageOwnership", "LegacySpaceId", "LegacyAppId", "GameToken", "ActivationIds", "TargetPartner", "ActivationType", "UbiServicesAppId" }, null, new[]{ typeof(global::Uplay.OwnershipCache.OwnedGame.Types.TargetPartner), typeof(global::Uplay.OwnershipCache.OwnedGame.Types.ActivationType), typeof(global::Uplay.OwnershipCache.OwnedGame.Types.PackageState) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Uplay.OwnershipCache.OwnershipCache), global::Uplay.OwnershipCache.OwnershipCache.Parser, new[]{ "OwnedGames", "ProductIds", "VisibleOrInstallableProductIds" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class OwnedGame : pb::IMessage<OwnedGame>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OwnedGame> _parser = new pb::MessageParser<OwnedGame>(() => new OwnedGame());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<OwnedGame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Uplay.OwnershipCache.OwnershipCacheReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OwnedGame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OwnedGame(OwnedGame other) : this() {
      _hasBits0 = other._hasBits0;
      productId_ = other.productId_;
      uplayId_ = other.uplayId_;
      downloadId_ = other.downloadId_;
      orbitId_ = other.orbitId_;
      cdKey_ = other.cdKey_;
      platform_ = other.platform_;
      productType_ = other.productType_;
      state_ = other.state_;
      productAssociations_ = other.productAssociations_.Clone();
      gameCode_ = other.gameCode_;
      brandId_ = other.brandId_;
      pendingKeystorageOwnership_ = other.pendingKeystorageOwnership_;
      legacySpaceId_ = other.legacySpaceId_;
      legacyAppId_ = other.legacyAppId_;
      gameToken_ = other.gameToken_;
      activationIds_ = other.activationIds_.Clone();
      targetPartner_ = other.targetPartner_;
      activationType_ = other.activationType_;
      ubiServicesAppId_ = other.ubiServicesAppId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OwnedGame Clone() {
      return new OwnedGame(this);
    }

    /// <summary>Field number for the "product_id" field.</summary>
    public const int ProductIdFieldNumber = 1;
    private readonly static uint ProductIdDefaultValue = 0;

    private uint productId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ProductId {
      get { if ((_hasBits0 & 1) != 0) { return productId_; } else { return ProductIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        productId_ = value;
      }
    }
    /// <summary>Gets whether the "product_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasProductId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "product_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearProductId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "uplay_id" field.</summary>
    public const int UplayIdFieldNumber = 2;
    private readonly static uint UplayIdDefaultValue = 0;

    private uint uplayId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint UplayId {
      get { if ((_hasBits0 & 2) != 0) { return uplayId_; } else { return UplayIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        uplayId_ = value;
      }
    }
    /// <summary>Gets whether the "uplay_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUplayId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "uplay_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUplayId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "download_id" field.</summary>
    public const int DownloadIdFieldNumber = 9;
    private readonly static uint DownloadIdDefaultValue = 0;

    private uint downloadId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint DownloadId {
      get { if ((_hasBits0 & 64) != 0) { return downloadId_; } else { return DownloadIdDefaultValue; } }
      set {
        _hasBits0 |= 64;
        downloadId_ = value;
      }
    }
    /// <summary>Gets whether the "download_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDownloadId {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "download_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDownloadId() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "orbit_id" field.</summary>
    public const int OrbitIdFieldNumber = 3;
    private readonly static uint OrbitIdDefaultValue = 0;

    private uint orbitId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint OrbitId {
      get { if ((_hasBits0 & 4) != 0) { return orbitId_; } else { return OrbitIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        orbitId_ = value;
      }
    }
    /// <summary>Gets whether the "orbit_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOrbitId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "orbit_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOrbitId() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "cd_key" field.</summary>
    public const int CdKeyFieldNumber = 4;
    private readonly static string CdKeyDefaultValue = "";

    private string cdKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CdKey {
      get { return cdKey_ ?? CdKeyDefaultValue; }
      set {
        cdKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "cd_key" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCdKey {
      get { return cdKey_ != null; }
    }
    /// <summary>Clears the value of the "cd_key" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCdKey() {
      cdKey_ = null;
    }

    /// <summary>Field number for the "platform" field.</summary>
    public const int PlatformFieldNumber = 5;
    private readonly static uint PlatformDefaultValue = 0;

    private uint platform_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Platform {
      get { if ((_hasBits0 & 8) != 0) { return platform_; } else { return PlatformDefaultValue; } }
      set {
        _hasBits0 |= 8;
        platform_ = value;
      }
    }
    /// <summary>Gets whether the "platform" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPlatform {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "platform" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPlatform() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "product_type" field.</summary>
    public const int ProductTypeFieldNumber = 6;
    private readonly static uint ProductTypeDefaultValue = 0;

    private uint productType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ProductType {
      get { if ((_hasBits0 & 16) != 0) { return productType_; } else { return ProductTypeDefaultValue; } }
      set {
        _hasBits0 |= 16;
        productType_ = value;
      }
    }
    /// <summary>Gets whether the "product_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasProductType {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "product_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearProductType() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 7;
    private readonly static uint StateDefaultValue = 0;

    private uint state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint State {
      get { if ((_hasBits0 & 32) != 0) { return state_; } else { return StateDefaultValue; } }
      set {
        _hasBits0 |= 32;
        state_ = value;
      }
    }
    /// <summary>Gets whether the "state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasState {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearState() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "product_associations" field.</summary>
    public const int ProductAssociationsFieldNumber = 8;
    private static readonly pb::FieldCodec<uint> _repeated_productAssociations_codec
        = pb::FieldCodec.ForUInt32(64);
    private readonly pbc::RepeatedField<uint> productAssociations_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<uint> ProductAssociations {
      get { return productAssociations_; }
    }

    /// <summary>Field number for the "game_code" field.</summary>
    public const int GameCodeFieldNumber = 10;
    private readonly static string GameCodeDefaultValue = "";

    private string gameCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string GameCode {
      get { return gameCode_ ?? GameCodeDefaultValue; }
      set {
        gameCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "game_code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGameCode {
      get { return gameCode_ != null; }
    }
    /// <summary>Clears the value of the "game_code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGameCode() {
      gameCode_ = null;
    }

    /// <summary>Field number for the "brand_id" field.</summary>
    public const int BrandIdFieldNumber = 11;
    private readonly static uint BrandIdDefaultValue = 0;

    private uint brandId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint BrandId {
      get { if ((_hasBits0 & 128) != 0) { return brandId_; } else { return BrandIdDefaultValue; } }
      set {
        _hasBits0 |= 128;
        brandId_ = value;
      }
    }
    /// <summary>Gets whether the "brand_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBrandId {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "brand_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBrandId() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "pending_keystorage_ownership" field.</summary>
    public const int PendingKeystorageOwnershipFieldNumber = 12;
    private readonly static bool PendingKeystorageOwnershipDefaultValue = false;

    private bool pendingKeystorageOwnership_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool PendingKeystorageOwnership {
      get { if ((_hasBits0 & 256) != 0) { return pendingKeystorageOwnership_; } else { return PendingKeystorageOwnershipDefaultValue; } }
      set {
        _hasBits0 |= 256;
        pendingKeystorageOwnership_ = value;
      }
    }
    /// <summary>Gets whether the "pending_keystorage_ownership" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPendingKeystorageOwnership {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "pending_keystorage_ownership" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPendingKeystorageOwnership() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "legacy_space_id" field.</summary>
    public const int LegacySpaceIdFieldNumber = 13;
    private readonly static string LegacySpaceIdDefaultValue = "";

    private string legacySpaceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LegacySpaceId {
      get { return legacySpaceId_ ?? LegacySpaceIdDefaultValue; }
      set {
        legacySpaceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "legacy_space_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLegacySpaceId {
      get { return legacySpaceId_ != null; }
    }
    /// <summary>Clears the value of the "legacy_space_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLegacySpaceId() {
      legacySpaceId_ = null;
    }

    /// <summary>Field number for the "legacy_app_id" field.</summary>
    public const int LegacyAppIdFieldNumber = 14;
    private readonly static string LegacyAppIdDefaultValue = "";

    private string legacyAppId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LegacyAppId {
      get { return legacyAppId_ ?? LegacyAppIdDefaultValue; }
      set {
        legacyAppId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "legacy_app_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLegacyAppId {
      get { return legacyAppId_ != null; }
    }
    /// <summary>Clears the value of the "legacy_app_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLegacyAppId() {
      legacyAppId_ = null;
    }

    /// <summary>Field number for the "game_token" field.</summary>
    public const int GameTokenFieldNumber = 15;
    private readonly static string GameTokenDefaultValue = "";

    private string gameToken_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string GameToken {
      get { return gameToken_ ?? GameTokenDefaultValue; }
      set {
        gameToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "game_token" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGameToken {
      get { return gameToken_ != null; }
    }
    /// <summary>Clears the value of the "game_token" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGameToken() {
      gameToken_ = null;
    }

    /// <summary>Field number for the "activation_ids" field.</summary>
    public const int ActivationIdsFieldNumber = 16;
    private static readonly pb::FieldCodec<uint> _repeated_activationIds_codec
        = pb::FieldCodec.ForUInt32(128);
    private readonly pbc::RepeatedField<uint> activationIds_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<uint> ActivationIds {
      get { return activationIds_; }
    }

    /// <summary>Field number for the "target_partner" field.</summary>
    public const int TargetPartnerFieldNumber = 17;
    private readonly static global::Uplay.OwnershipCache.OwnedGame.Types.TargetPartner TargetPartnerDefaultValue = global::Uplay.OwnershipCache.OwnedGame.Types.TargetPartner.None;

    private global::Uplay.OwnershipCache.OwnedGame.Types.TargetPartner targetPartner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Uplay.OwnershipCache.OwnedGame.Types.TargetPartner TargetPartner {
      get { if ((_hasBits0 & 512) != 0) { return targetPartner_; } else { return TargetPartnerDefaultValue; } }
      set {
        _hasBits0 |= 512;
        targetPartner_ = value;
      }
    }
    /// <summary>Gets whether the "target_partner" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTargetPartner {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "target_partner" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTargetPartner() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "activation_type" field.</summary>
    public const int ActivationTypeFieldNumber = 18;
    private readonly static global::Uplay.OwnershipCache.OwnedGame.Types.ActivationType ActivationTypeDefaultValue = global::Uplay.OwnershipCache.OwnedGame.Types.ActivationType.Purchase;

    private global::Uplay.OwnershipCache.OwnedGame.Types.ActivationType activationType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Uplay.OwnershipCache.OwnedGame.Types.ActivationType ActivationType {
      get { if ((_hasBits0 & 1024) != 0) { return activationType_; } else { return ActivationTypeDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        activationType_ = value;
      }
    }
    /// <summary>Gets whether the "activation_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasActivationType {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "activation_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearActivationType() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "ubiServices_app_id" field.</summary>
    public const int UbiServicesAppIdFieldNumber = 19;
    private readonly static string UbiServicesAppIdDefaultValue = "";

    private string ubiServicesAppId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string UbiServicesAppId {
      get { return ubiServicesAppId_ ?? UbiServicesAppIdDefaultValue; }
      set {
        ubiServicesAppId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "ubiServices_app_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUbiServicesAppId {
      get { return ubiServicesAppId_ != null; }
    }
    /// <summary>Clears the value of the "ubiServices_app_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUbiServicesAppId() {
      ubiServicesAppId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as OwnedGame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(OwnedGame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProductId != other.ProductId) return false;
      if (UplayId != other.UplayId) return false;
      if (DownloadId != other.DownloadId) return false;
      if (OrbitId != other.OrbitId) return false;
      if (CdKey != other.CdKey) return false;
      if (Platform != other.Platform) return false;
      if (ProductType != other.ProductType) return false;
      if (State != other.State) return false;
      if(!productAssociations_.Equals(other.productAssociations_)) return false;
      if (GameCode != other.GameCode) return false;
      if (BrandId != other.BrandId) return false;
      if (PendingKeystorageOwnership != other.PendingKeystorageOwnership) return false;
      if (LegacySpaceId != other.LegacySpaceId) return false;
      if (LegacyAppId != other.LegacyAppId) return false;
      if (GameToken != other.GameToken) return false;
      if(!activationIds_.Equals(other.activationIds_)) return false;
      if (TargetPartner != other.TargetPartner) return false;
      if (ActivationType != other.ActivationType) return false;
      if (UbiServicesAppId != other.UbiServicesAppId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasProductId) hash ^= ProductId.GetHashCode();
      if (HasUplayId) hash ^= UplayId.GetHashCode();
      if (HasDownloadId) hash ^= DownloadId.GetHashCode();
      if (HasOrbitId) hash ^= OrbitId.GetHashCode();
      if (HasCdKey) hash ^= CdKey.GetHashCode();
      if (HasPlatform) hash ^= Platform.GetHashCode();
      if (HasProductType) hash ^= ProductType.GetHashCode();
      if (HasState) hash ^= State.GetHashCode();
      hash ^= productAssociations_.GetHashCode();
      if (HasGameCode) hash ^= GameCode.GetHashCode();
      if (HasBrandId) hash ^= BrandId.GetHashCode();
      if (HasPendingKeystorageOwnership) hash ^= PendingKeystorageOwnership.GetHashCode();
      if (HasLegacySpaceId) hash ^= LegacySpaceId.GetHashCode();
      if (HasLegacyAppId) hash ^= LegacyAppId.GetHashCode();
      if (HasGameToken) hash ^= GameToken.GetHashCode();
      hash ^= activationIds_.GetHashCode();
      if (HasTargetPartner) hash ^= TargetPartner.GetHashCode();
      if (HasActivationType) hash ^= ActivationType.GetHashCode();
      if (HasUbiServicesAppId) hash ^= UbiServicesAppId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasProductId) {
        output.WriteRawTag(8);
        output.WriteUInt32(ProductId);
      }
      if (HasUplayId) {
        output.WriteRawTag(16);
        output.WriteUInt32(UplayId);
      }
      if (HasOrbitId) {
        output.WriteRawTag(24);
        output.WriteUInt32(OrbitId);
      }
      if (HasCdKey) {
        output.WriteRawTag(34);
        output.WriteString(CdKey);
      }
      if (HasPlatform) {
        output.WriteRawTag(40);
        output.WriteUInt32(Platform);
      }
      if (HasProductType) {
        output.WriteRawTag(48);
        output.WriteUInt32(ProductType);
      }
      if (HasState) {
        output.WriteRawTag(56);
        output.WriteUInt32(State);
      }
      productAssociations_.WriteTo(output, _repeated_productAssociations_codec);
      if (HasDownloadId) {
        output.WriteRawTag(72);
        output.WriteUInt32(DownloadId);
      }
      if (HasGameCode) {
        output.WriteRawTag(82);
        output.WriteString(GameCode);
      }
      if (HasBrandId) {
        output.WriteRawTag(88);
        output.WriteUInt32(BrandId);
      }
      if (HasPendingKeystorageOwnership) {
        output.WriteRawTag(96);
        output.WriteBool(PendingKeystorageOwnership);
      }
      if (HasLegacySpaceId) {
        output.WriteRawTag(106);
        output.WriteString(LegacySpaceId);
      }
      if (HasLegacyAppId) {
        output.WriteRawTag(114);
        output.WriteString(LegacyAppId);
      }
      if (HasGameToken) {
        output.WriteRawTag(122);
        output.WriteString(GameToken);
      }
      activationIds_.WriteTo(output, _repeated_activationIds_codec);
      if (HasTargetPartner) {
        output.WriteRawTag(136, 1);
        output.WriteEnum((int) TargetPartner);
      }
      if (HasActivationType) {
        output.WriteRawTag(144, 1);
        output.WriteEnum((int) ActivationType);
      }
      if (HasUbiServicesAppId) {
        output.WriteRawTag(154, 1);
        output.WriteString(UbiServicesAppId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasProductId) {
        output.WriteRawTag(8);
        output.WriteUInt32(ProductId);
      }
      if (HasUplayId) {
        output.WriteRawTag(16);
        output.WriteUInt32(UplayId);
      }
      if (HasOrbitId) {
        output.WriteRawTag(24);
        output.WriteUInt32(OrbitId);
      }
      if (HasCdKey) {
        output.WriteRawTag(34);
        output.WriteString(CdKey);
      }
      if (HasPlatform) {
        output.WriteRawTag(40);
        output.WriteUInt32(Platform);
      }
      if (HasProductType) {
        output.WriteRawTag(48);
        output.WriteUInt32(ProductType);
      }
      if (HasState) {
        output.WriteRawTag(56);
        output.WriteUInt32(State);
      }
      productAssociations_.WriteTo(ref output, _repeated_productAssociations_codec);
      if (HasDownloadId) {
        output.WriteRawTag(72);
        output.WriteUInt32(DownloadId);
      }
      if (HasGameCode) {
        output.WriteRawTag(82);
        output.WriteString(GameCode);
      }
      if (HasBrandId) {
        output.WriteRawTag(88);
        output.WriteUInt32(BrandId);
      }
      if (HasPendingKeystorageOwnership) {
        output.WriteRawTag(96);
        output.WriteBool(PendingKeystorageOwnership);
      }
      if (HasLegacySpaceId) {
        output.WriteRawTag(106);
        output.WriteString(LegacySpaceId);
      }
      if (HasLegacyAppId) {
        output.WriteRawTag(114);
        output.WriteString(LegacyAppId);
      }
      if (HasGameToken) {
        output.WriteRawTag(122);
        output.WriteString(GameToken);
      }
      activationIds_.WriteTo(ref output, _repeated_activationIds_codec);
      if (HasTargetPartner) {
        output.WriteRawTag(136, 1);
        output.WriteEnum((int) TargetPartner);
      }
      if (HasActivationType) {
        output.WriteRawTag(144, 1);
        output.WriteEnum((int) ActivationType);
      }
      if (HasUbiServicesAppId) {
        output.WriteRawTag(154, 1);
        output.WriteString(UbiServicesAppId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasProductId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ProductId);
      }
      if (HasUplayId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UplayId);
      }
      if (HasDownloadId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DownloadId);
      }
      if (HasOrbitId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OrbitId);
      }
      if (HasCdKey) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CdKey);
      }
      if (HasPlatform) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Platform);
      }
      if (HasProductType) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ProductType);
      }
      if (HasState) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(State);
      }
      size += productAssociations_.CalculateSize(_repeated_productAssociations_codec);
      if (HasGameCode) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameCode);
      }
      if (HasBrandId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BrandId);
      }
      if (HasPendingKeystorageOwnership) {
        size += 1 + 1;
      }
      if (HasLegacySpaceId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LegacySpaceId);
      }
      if (HasLegacyAppId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LegacyAppId);
      }
      if (HasGameToken) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameToken);
      }
      size += activationIds_.CalculateSize(_repeated_activationIds_codec);
      if (HasTargetPartner) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TargetPartner);
      }
      if (HasActivationType) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ActivationType);
      }
      if (HasUbiServicesAppId) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UbiServicesAppId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(OwnedGame other) {
      if (other == null) {
        return;
      }
      if (other.HasProductId) {
        ProductId = other.ProductId;
      }
      if (other.HasUplayId) {
        UplayId = other.UplayId;
      }
      if (other.HasDownloadId) {
        DownloadId = other.DownloadId;
      }
      if (other.HasOrbitId) {
        OrbitId = other.OrbitId;
      }
      if (other.HasCdKey) {
        CdKey = other.CdKey;
      }
      if (other.HasPlatform) {
        Platform = other.Platform;
      }
      if (other.HasProductType) {
        ProductType = other.ProductType;
      }
      if (other.HasState) {
        State = other.State;
      }
      productAssociations_.Add(other.productAssociations_);
      if (other.HasGameCode) {
        GameCode = other.GameCode;
      }
      if (other.HasBrandId) {
        BrandId = other.BrandId;
      }
      if (other.HasPendingKeystorageOwnership) {
        PendingKeystorageOwnership = other.PendingKeystorageOwnership;
      }
      if (other.HasLegacySpaceId) {
        LegacySpaceId = other.LegacySpaceId;
      }
      if (other.HasLegacyAppId) {
        LegacyAppId = other.LegacyAppId;
      }
      if (other.HasGameToken) {
        GameToken = other.GameToken;
      }
      activationIds_.Add(other.activationIds_);
      if (other.HasTargetPartner) {
        TargetPartner = other.TargetPartner;
      }
      if (other.HasActivationType) {
        ActivationType = other.ActivationType;
      }
      if (other.HasUbiServicesAppId) {
        UbiServicesAppId = other.UbiServicesAppId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ProductId = input.ReadUInt32();
            break;
          }
          case 16: {
            UplayId = input.ReadUInt32();
            break;
          }
          case 24: {
            OrbitId = input.ReadUInt32();
            break;
          }
          case 34: {
            CdKey = input.ReadString();
            break;
          }
          case 40: {
            Platform = input.ReadUInt32();
            break;
          }
          case 48: {
            ProductType = input.ReadUInt32();
            break;
          }
          case 56: {
            State = input.ReadUInt32();
            break;
          }
          case 66:
          case 64: {
            productAssociations_.AddEntriesFrom(input, _repeated_productAssociations_codec);
            break;
          }
          case 72: {
            DownloadId = input.ReadUInt32();
            break;
          }
          case 82: {
            GameCode = input.ReadString();
            break;
          }
          case 88: {
            BrandId = input.ReadUInt32();
            break;
          }
          case 96: {
            PendingKeystorageOwnership = input.ReadBool();
            break;
          }
          case 106: {
            LegacySpaceId = input.ReadString();
            break;
          }
          case 114: {
            LegacyAppId = input.ReadString();
            break;
          }
          case 122: {
            GameToken = input.ReadString();
            break;
          }
          case 130:
          case 128: {
            activationIds_.AddEntriesFrom(input, _repeated_activationIds_codec);
            break;
          }
          case 136: {
            TargetPartner = (global::Uplay.OwnershipCache.OwnedGame.Types.TargetPartner) input.ReadEnum();
            break;
          }
          case 144: {
            ActivationType = (global::Uplay.OwnershipCache.OwnedGame.Types.ActivationType) input.ReadEnum();
            break;
          }
          case 154: {
            UbiServicesAppId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ProductId = input.ReadUInt32();
            break;
          }
          case 16: {
            UplayId = input.ReadUInt32();
            break;
          }
          case 24: {
            OrbitId = input.ReadUInt32();
            break;
          }
          case 34: {
            CdKey = input.ReadString();
            break;
          }
          case 40: {
            Platform = input.ReadUInt32();
            break;
          }
          case 48: {
            ProductType = input.ReadUInt32();
            break;
          }
          case 56: {
            State = input.ReadUInt32();
            break;
          }
          case 66:
          case 64: {
            productAssociations_.AddEntriesFrom(ref input, _repeated_productAssociations_codec);
            break;
          }
          case 72: {
            DownloadId = input.ReadUInt32();
            break;
          }
          case 82: {
            GameCode = input.ReadString();
            break;
          }
          case 88: {
            BrandId = input.ReadUInt32();
            break;
          }
          case 96: {
            PendingKeystorageOwnership = input.ReadBool();
            break;
          }
          case 106: {
            LegacySpaceId = input.ReadString();
            break;
          }
          case 114: {
            LegacyAppId = input.ReadString();
            break;
          }
          case 122: {
            GameToken = input.ReadString();
            break;
          }
          case 130:
          case 128: {
            activationIds_.AddEntriesFrom(ref input, _repeated_activationIds_codec);
            break;
          }
          case 136: {
            TargetPartner = (global::Uplay.OwnershipCache.OwnedGame.Types.TargetPartner) input.ReadEnum();
            break;
          }
          case 144: {
            ActivationType = (global::Uplay.OwnershipCache.OwnedGame.Types.ActivationType) input.ReadEnum();
            break;
          }
          case 154: {
            UbiServicesAppId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the OwnedGame message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public enum TargetPartner {
        [pbr::OriginalName("TargetPartner_None")] None = 0,
        [pbr::OriginalName("TargetPartner_EpicGames")] EpicGames = 1,
        [pbr::OriginalName("TargetPartner_Neowiz")] Neowiz = 2,
        [pbr::OriginalName("TargetPartner_Microsoft")] Microsoft = 3,
      }

      public enum ActivationType {
        [pbr::OriginalName("ActivationType_Purchase")] Purchase = 0,
        [pbr::OriginalName("ActivationType_Trial")] Trial = 1,
        [pbr::OriginalName("ActivationType_Subscription")] Subscription = 2,
      }

      public enum PackageState {
        [pbr::OriginalName("PackageState_Unavailable")] Unavailable = 0,
        [pbr::OriginalName("PackageState_PreReleased")] PreReleased = 1,
        [pbr::OriginalName("PackageState_PreDownloadable")] PreDownloadable = 2,
        [pbr::OriginalName("PackageState_Released")] Released = 3,
        [pbr::OriginalName("PackageState_Expired")] Expired = 4,
      }

    }
    #endregion

  }

  public sealed partial class OwnershipCache : pb::IMessage<OwnershipCache>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OwnershipCache> _parser = new pb::MessageParser<OwnershipCache>(() => new OwnershipCache());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<OwnershipCache> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Uplay.OwnershipCache.OwnershipCacheReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OwnershipCache() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OwnershipCache(OwnershipCache other) : this() {
      ownedGames_ = other.ownedGames_.Clone();
      productIds_ = other.productIds_.Clone();
      visibleOrInstallableProductIds_ = other.visibleOrInstallableProductIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OwnershipCache Clone() {
      return new OwnershipCache(this);
    }

    /// <summary>Field number for the "owned_games" field.</summary>
    public const int OwnedGamesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Uplay.OwnershipCache.OwnedGame> _repeated_ownedGames_codec
        = pb::FieldCodec.ForMessage(10, global::Uplay.OwnershipCache.OwnedGame.Parser);
    private readonly pbc::RepeatedField<global::Uplay.OwnershipCache.OwnedGame> ownedGames_ = new pbc::RepeatedField<global::Uplay.OwnershipCache.OwnedGame>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Uplay.OwnershipCache.OwnedGame> OwnedGames {
      get { return ownedGames_; }
    }

    /// <summary>Field number for the "product_ids" field.</summary>
    public const int ProductIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_productIds_codec
        = pb::FieldCodec.ForUInt32(16);
    private readonly pbc::RepeatedField<uint> productIds_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<uint> ProductIds {
      get { return productIds_; }
    }

    /// <summary>Field number for the "visible_or_installable_product_ids" field.</summary>
    public const int VisibleOrInstallableProductIdsFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_visibleOrInstallableProductIds_codec
        = pb::FieldCodec.ForUInt32(24);
    private readonly pbc::RepeatedField<uint> visibleOrInstallableProductIds_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<uint> VisibleOrInstallableProductIds {
      get { return visibleOrInstallableProductIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as OwnershipCache);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(OwnershipCache other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!ownedGames_.Equals(other.ownedGames_)) return false;
      if(!productIds_.Equals(other.productIds_)) return false;
      if(!visibleOrInstallableProductIds_.Equals(other.visibleOrInstallableProductIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ownedGames_.GetHashCode();
      hash ^= productIds_.GetHashCode();
      hash ^= visibleOrInstallableProductIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      ownedGames_.WriteTo(output, _repeated_ownedGames_codec);
      productIds_.WriteTo(output, _repeated_productIds_codec);
      visibleOrInstallableProductIds_.WriteTo(output, _repeated_visibleOrInstallableProductIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      ownedGames_.WriteTo(ref output, _repeated_ownedGames_codec);
      productIds_.WriteTo(ref output, _repeated_productIds_codec);
      visibleOrInstallableProductIds_.WriteTo(ref output, _repeated_visibleOrInstallableProductIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += ownedGames_.CalculateSize(_repeated_ownedGames_codec);
      size += productIds_.CalculateSize(_repeated_productIds_codec);
      size += visibleOrInstallableProductIds_.CalculateSize(_repeated_visibleOrInstallableProductIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(OwnershipCache other) {
      if (other == null) {
        return;
      }
      ownedGames_.Add(other.ownedGames_);
      productIds_.Add(other.productIds_);
      visibleOrInstallableProductIds_.Add(other.visibleOrInstallableProductIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ownedGames_.AddEntriesFrom(input, _repeated_ownedGames_codec);
            break;
          }
          case 18:
          case 16: {
            productIds_.AddEntriesFrom(input, _repeated_productIds_codec);
            break;
          }
          case 26:
          case 24: {
            visibleOrInstallableProductIds_.AddEntriesFrom(input, _repeated_visibleOrInstallableProductIds_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ownedGames_.AddEntriesFrom(ref input, _repeated_ownedGames_codec);
            break;
          }
          case 18:
          case 16: {
            productIds_.AddEntriesFrom(ref input, _repeated_productIds_codec);
            break;
          }
          case 26:
          case 24: {
            visibleOrInstallableProductIds_.AddEntriesFrom(ref input, _repeated_visibleOrInstallableProductIds_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
